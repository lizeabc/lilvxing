import{c as s,o as a,f as n}from"./app-Bm1F-R0U.js";const t="/images/blog/json_bigint_1.png",p="/images/blog/json_bigint_2.png",l={class:"prose m-auto slide-enter-content"},e=n(`<p>由于前端能够显示的数字最大只有 53 位，有时候会遇到后端返回的数据中数字过大，超过了前端精度，但可能后端出于某些原因无法更改，要前端处理时。</p><p>其实本身接口返回的 Response 是个 json 字符串，由于 axios 默认使用 JSON.parse 导致精度丢失，我们可以使用第三方库修改 axios 默认的格式化方法，这里我使用的 json-bigint。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> JSONBIG</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">json-bigint</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">axios</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">defaults</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">transformResponse</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  function</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">data</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> json</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> JSONBIG</span><span style="--s-dark:#666666;--s-light:#999999;">({</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">      storeAsString</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> true</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    });</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> res</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> json</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">parse</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">data</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> res</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  },</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">];</span></span></code></pre><p>否则就会报错，设置格式化方法之后，返回值过大的数字就会被转为字符串。我使用的时候会有 bug，必须设置 storeAsString 属性为 true。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-"><span class="line"><span>TypeError: BigNumber is not a constructor</span></span></code></pre><p>除此之外，还有一个可能出现的隐藏 bug，因为我的项目中对返回值做了统一的处理，因此发现了 json-bigint 处理后的对象是没有原型链的，返回的对象上没有<strong>proto</strong>属性。导致使用 instanceof 是无法判断的，使用 typeof 是可以的，但 typeof 无法分辨 array 和 object，建议使用 toString.call 方法。</p><ul><li>正常对象，有__proto__</li></ul><p><img src="`+t+'" alt="json_bigint_1"></p><ul><li>json-bigint 处理的对象，没有__proto__</li></ul><p><img src="'+p+'" alt="json_bigint_2"></p>',10),i=[e],h={__name:"json_bigint",setup(r){return(g,o)=>(a(),s("div",l,i))}};export{h as default};
//# sourceMappingURL=json_bigint-BtVW73zf.js.map

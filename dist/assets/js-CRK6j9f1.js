import{c as n,e as l,w as t,f as s,r as e,o as p,b as i}from"./app-Bm1F-R0U.js";const r="/images/blog/old/js.jpg",d={class:"prose m-auto slide-enter-content"},h=s('<h1 id="javascript-学习笔记" tabindex="-1">JavaScript 学习笔记 <a class="header-anchor" href="#javascript-学习笔记" aria-hidden="true">#</a></h1><span>      JavaScript 是属于 HTML 和 Web 的编程语言。 所有现代的 HTML 页面都使用 JavaScript。 下面是关于JavaScript学习笔记，未完善，内容较乱 </span><h2 id="变量的声明" tabindex="-1">变量的声明 <a class="header-anchor" href="#变量的声明" aria-hidden="true">#</a></h2><h3 id="var" tabindex="-1">var <a class="header-anchor" href="#var" aria-hidden="true">#</a></h3><ul><li>声明所有的数据类型</li><li>变量什么都可以存</li></ul><h3 id="function" tabindex="-1">function <a class="header-anchor" href="#function" aria-hidden="true">#</a></h3><ul><li>专门用来声明函数</li><li>函数是一种变量</li><li>也是一个特殊的对象类型</li></ul><h4 id="有名函数" tabindex="-1">有名函数 <a class="header-anchor" href="#有名函数" aria-hidden="true">#</a></h4><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span></code></pre>',9),g=s(`<blockquote><p>变量不一定是函数，但是函数名可以叫做变量 这里的 fn 可以叫 <code>函数fn</code> ，也可以叫 <code>变量fn</code></p></blockquote><h4 id="匿名函数" tabindex="-1">匿名函数 <a class="header-anchor" href="#匿名函数" aria-hidden="true">#</a></h4><p>function (){} 直接这样写是会报错的，匿名函数必须付给某个对象（变量或者事件）</p><h4 id="函数的声明" tabindex="-1">函数的声明 <a class="header-anchor" href="#函数的声明" aria-hidden="true">#</a></h4><ul><li>函数声明</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span></code></pre><ul><li>函数表达式</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {};</span></span></code></pre><h3 id="函数执行方式" tabindex="-1">函数执行方式 <a class="header-anchor" href="#函数执行方式" aria-hidden="true">#</a></h3><h4 id="函数自执行" tabindex="-1">函数自执行 <a class="header-anchor" href="#函数自执行" aria-hidden="true">#</a></h4><p>定义就执行</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//&lt;1&gt;、</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  函数内容</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">})();</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//&lt;2&gt;、</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  函数内容</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">})();</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//&lt;3&gt;、+ - ~ !</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">+</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  函数内容</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">})();</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">-</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  函数内容</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">})();</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">~</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  函数内容</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">})();</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">!</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  函数内容</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">})();</span></span></code></pre><blockquote><p>注：函数外不可访问函数内的内容</p></blockquote><h4 id="被动执行" tabindex="-1">被动执行 <a class="header-anchor" href="#被动执行" aria-hidden="true">#</a></h4><p>直接调用</p><h3 id="函数传参" tabindex="-1">函数传参 <a class="header-anchor" href="#函数传参" aria-hidden="true">#</a></h3><h4 id="对应传参" tabindex="-1">对应传参 <a class="header-anchor" href="#对应传参" aria-hidden="true">#</a></h4><p>传什么类型的东西形参都接收</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> y</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //形参</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> y</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //实参</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn1</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> y</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> y</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">10</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 20</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //a=30</span></span></code></pre><h4 id="任意传参" tabindex="-1">任意传参 <a class="header-anchor" href="#任意传参" aria-hidden="true">#</a></h4><ul><li>argunments – 类数组</li><li>argunments.length – 参数个数</li><li>argunments[index] – 访问每一个</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // a 为1</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn1</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">arguments</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#B8A965;--s-light:#998418;">length</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">fn1</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 结果为4</span></span></code></pre><h4 id="return" tabindex="-1">return <a class="header-anchor" href="#return" aria-hidden="true">#</a></h4><p>默认函数返回值：undefined</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //默认返回undefined</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> y</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> y</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //不需要定义 a = x + y;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 返回结果为2</span></span></code></pre><blockquote><p>注：</p><ul><li>alert(fn()); alert 某个函数时,弹窗显示的是函数的返回值，即 return 后的内容</li><li>直接写 fn(); 是调用函数</li><li>函数 return 之后的内容不会执行</li></ul></blockquote><p>例 1</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">ok</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">fn</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //此时弹窗显示 ok</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#80A665;--s-light:#59873A;">fn</span><span style="--s-dark:#666666;--s-light:#999999;">());</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //此时弹窗显示 ok，之后显示 undefined</span></span></code></pre><p>例 2</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">fn的内容</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">return的返回值</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  };</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 将fn整个内容付给a，a相当于fn，换个名字而已</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 将fn的返回值付给a，并且此时fn()被执行，弹&#39;fn的内容&#39;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 相当于 function a(){alert(&#39;return的返回值&#39;)};</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 弹&#39;return的返回值&#39;</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">a</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span></code></pre><h3 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-hidden="true">#</a></h3><p><code>作用范围，有效范围</code></p><ul><li><p>全局变量 – 直接在 script 标签下声明的变量</p></li><li><p>局部变量 – 所有的花括号都会形成单独的作用域</p></li></ul><blockquote><p><code>注：</code>在 ES5 中，for and if 的 {} 是不存在作用域的，只有函数存在作用域</p></blockquote><h4 id="全局域" tabindex="-1">全局域 <a class="header-anchor" href="#全局域" aria-hidden="true">#</a></h4><p>全局变量：直接在 script 下声明的变量(即 window 的属性)</p><h4 id="局部域" tabindex="-1">局部域 <a class="header-anchor" href="#局部域" aria-hidden="true">#</a></h4><p>局部变量：在函数内部声明的变量，任何一个函数在执行时就会开启一个局部域</p><h4 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-hidden="true">#</a></h4><ol><li>内部变量会覆盖外部变量</li></ol><p>只要内部声明了和外部一样的<code>变量</code>，函数就不会到外部去找这个变量</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">ok</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 此时a为undefined，因为变量提升，a还没有值</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 123</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><ol start="2"><li>就近原则</li></ol><p>只要是内部声明了和外部一样的<code>形参</code>或者<code>变量</code>，那么在函数内修改和访问的都是这个<code>形参</code>、或者<code>变量</code>。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">ok</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //123</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">我是a</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //我是a</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">123</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //ok</span></span></code></pre><h3 id="continue-break" tabindex="-1">continue / break <a class="header-anchor" href="#continue-break" aria-hidden="true">#</a></h3><ul><li>continue 跳出当前一层循环</li><li>break 跳出整个循环</li></ul><h2 id="元素" tabindex="-1">元素 <a class="header-anchor" href="#元素" aria-hidden="true">#</a></h2><h3 id="对属性的操作" tabindex="-1">对属性的操作 <a class="header-anchor" href="#对属性的操作" aria-hidden="true">#</a></h3><ul><li>getAttribute(‘属性名’) 获取属性</li><li>setAttribute(‘属性名’,‘值’) 修改属性</li><li>removeAttribute(‘属性名’) 删除属性</li><li>hasAttribute(‘属性名’) 判断属性是否存在</li><li>xxx.classList</li><li>xxx.add() 加类名</li><li>xxx.remove() 移除类名</li><li>xxx.toggle() 切换类名（有则删，无则加）</li><li>xxx.contains() 返回布尔值（有 true，无 false）</li></ul><h4 id="getcomputedstyle" tabindex="-1">getComputedStyle(); <a class="header-anchor" href="#getcomputedstyle" aria-hidden="true">#</a></h4><ul><li>获取元素样式</li><li>不兼容 IE8 及以下浏览器</li><li>获取：getComputedStyle().width</li></ul><h4 id="obj-currentstyle" tabindex="-1">obj.currentStyle; <a class="header-anchor" href="#obj-currentstyle" aria-hidden="true">#</a></h4><ul><li>IE8 及以下兼容写法</li><li>获取：obj.currentStyle.width</li></ul><h3 id="代码解析" tabindex="-1">代码解析 <a class="header-anchor" href="#代码解析" aria-hidden="true">#</a></h3><h4 id="预解析" tabindex="-1">预解析 <a class="header-anchor" href="#预解析" aria-hidden="true">#</a></h4><blockquote><p>先去找带 <code>var 等关键词</code> ，<code>变量声明</code>以及<code>函数声明</code>，然后将他们存在一个仓库中，会给每个变量都赋 undefined，所以当在变量赋值前查看变量时都等于 undefined</p></blockquote><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 变量提升</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 函数提升</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 同名函数会被后面的覆盖</span></span></code></pre><h4 id="解析" tabindex="-1">解析 <a class="header-anchor" href="#解析" aria-hidden="true">#</a></h4><h4 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-hidden="true">#</a></h4><p>隐式过程：传参（在编译最后，执行之前执行，也可以理解为优先级更高）</p><p>执行顺序</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> num</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">num</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">num</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //5</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> num</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 10</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">num</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //10</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">})(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">num</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> num</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">num</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">num</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //5</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> num</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">num</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //5</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">})(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">num</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><h3 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-hidden="true">#</a></h3><ol><li>当函数执行完毕后，就把解析那个所谓的仓库直接丢掉，<code>释放内存</code></li><li>而如果<code>fn()函数</code>带有 return 的话，return 的内容会被返回给 fn()；return 的内容（变量/函数）不会被丢掉，而是保存下来，而没有 return 的函数 fn()中的内容会被丢掉</li><li>所以，当定义一个变量 f 去接收带有 return 的函数 fn() 时，执行变量函数 f() 时，会将 return 后面的函数内容执行</li></ol><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">fn函数返回值</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">return返回值</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  };</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> f</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#80A665;--s-light:#59873A;">f</span><span style="--s-dark:#666666;--s-light:#999999;">());</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/*</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">弹窗结构：</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    fn函数返回值</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    return返回值</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    undefined</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">原因：</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    var f = fn(); 执行了fn</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    alert(f()); 执行f，f相当于function f(){alert(&quot;return返回值&quot;);}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    alert(f()); f函数没有返回值，默认返回undefined</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">*/</span></span></code></pre><blockquote><p><code>注意：</code> fn()执行完毕之后虽说将<code>解析的那个仓库</code>丢掉了，但是只是将<code>内存中执行的函数内容释放了</code>，函数 fn 依然存在的,后面依然可以调用；而 return 会使的 fn() 函数的内容/声明的变量保存下来，即 return 内部函数使用的外部函数变量会被保存下来，不会被 js 的垃圾回收机制给回收掉</p></blockquote><h3 id="定时器" tabindex="-1">定时器 <a class="header-anchor" href="#定时器" aria-hidden="true">#</a></h3><h4 id="回调函数" tabindex="-1">回调函数 <a class="header-anchor" href="#回调函数" aria-hidden="true">#</a></h4><p>函数 a 作为参数传入函数 b，由函数 b 执行函数 a，那么函数 a 就叫做回调函数。</p><h4 id="settimeout" tabindex="-1">setTimeout(); <a class="header-anchor" href="#settimeout" aria-hidden="true">#</a></h4><ul><li>只执行一次</li><li>启动定时器 <ul><li>参数 1：处理函数/回调函数</li><li>参数 2：时间间隔</li></ul></li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">(){}</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">setTimeout</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">fn</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1000</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> 1</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">秒之后执行fn</span></span></code></pre><h4 id="settnterval" tabindex="-1">setTnterval(); <a class="header-anchor" href="#settnterval" aria-hidden="true">#</a></h4><p>循环执行</p><h4 id="清除定时器" tabindex="-1">清除定时器 <a class="header-anchor" href="#清除定时器" aria-hidden="true">#</a></h4><blockquote><p>参数为序号</p></blockquote><ul><li>clearTimeout();</li><li>clearInterval();</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> timer1</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> setInterval</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> (){</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">，</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">10000</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span></code></pre><blockquote><p><code>浏览器的最低频率一般是 13 - 20 之间</code></p></blockquote><h3 id="获取样式" tabindex="-1">获取样式 <a class="header-anchor" href="#获取样式" aria-hidden="true">#</a></h3><ol><li>普通的 <code>.style.height</code> ,获取到的是行内样式（如果没有行内样式就获取不到）</li></ol><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> oDiv</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getElementById</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">div</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">oDiv</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">style</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">height</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //获取到的是行内样式</span></span></code></pre><ol start="2"><li>函数 <code>getComputedStyle()</code> ，获取到的是 div 最终的样式（不管样式写在哪，获取 div 的最终呈现的样式）</li></ol><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#80A665;--s-light:#59873A;">getComputedStyle</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">oDiv</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">height</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><ol start="3"><li>兼容 IE IE8 以下不认识 getComputedStyle 函数</li></ol><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> h</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">；</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">if</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> window</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">getComputedStyle</span><span style="--s-dark:#666666;--s-light:#999999;"> ){</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    h</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> getComputedStyle</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">oDiv</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">height</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">else</span><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    h</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> oDiv</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">currentStyle</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">height</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p><code>注:</code></p><ul><li>不要获取没有定义的样式</li><li>不要获取复合样式</li></ul><h3 id="封装" tabindex="-1">封装 <a class="header-anchor" href="#封装" aria-hidden="true">#</a></h3><p>例：用函数封装兼容 IE8 的 getComputedStyle 函数</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 获取某个对象（obj）的某个属性（attr）</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> getStyle</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">obj</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attr</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">attr</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">){</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> window</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">getComputedStyle</span><span style="--s-dark:#666666;--s-light:#999999;"> ){</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">        return</span><span style="--s-dark:#80A665;--s-light:#59873A;"> getComputedStyle</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">obj</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attr</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">attr</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">else</span><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> obj</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">currentStyle</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attr</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><h3 id="添加-移除属性" tabindex="-1">添加/移除属性 <a class="header-anchor" href="#添加-移除属性" aria-hidden="true">#</a></h3><ul><li>添加属性：setAttribute(‘’,‘’);</li><li>移除属性：removeAttribute(‘’);</li></ul><h2 id="数据" tabindex="-1">数据 <a class="header-anchor" href="#数据" aria-hidden="true">#</a></h2><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-hidden="true">#</a></h3><ul><li>number 类型 – 数字类型</li><li>string 类型 <ul><li>字符串只是数据，不是类型</li><li>所有带引号包裹的都是字符串</li><li>字符串的类型为 string 类型</li></ul></li><li>boolean 类型 – 布尔值<code>true/false</code></li><li>undefined – 未定义，没有值，系统默认给的值</li><li>null – 空，空的指针对象，表示没有对象，这里不该有值</li><li>object – 对象</li></ul><h4 id="引用型数据类型" tabindex="-1">引用型数据类型 <a class="header-anchor" href="#引用型数据类型" aria-hidden="true">#</a></h4><ul><li>object 每 var 一个都会新建一个内存地址去存放这个 object</li><li>而其他的五种数据类型，属于基本数据类型，是直接比较值，只比较数据值的‘形’是否一样</li></ul><h4 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a></h4><h3 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-hidden="true">#</a></h3><h4 id="字符串定义" tabindex="-1">字符串定义 <a class="header-anchor" href="#字符串定义" aria-hidden="true">#</a></h4><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">helloWorld</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 直接量</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> String</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">helloWorle</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> String</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">helloWorle</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><ul><li>concat 字符串拼接</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str1</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">OK</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> new_str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">concat</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str1</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">new_str</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // helloWorleOK</span></span></code></pre><h4 id="查找字符串" tabindex="-1">查找字符串 <a class="header-anchor" href="#查找字符串" aria-hidden="true">#</a></h4><ul><li>通过指定字符查找位置 <ul><li>indexOf(‘val’,num) <ul><li>查询字符，val 查询值，num 开始下标</li><li>找不到返回-1</li></ul></li><li>lastIndexOf 从后面往前找</li></ul></li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">helloWorld</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">indexOf</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">h</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">));</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 0 -- 第0个</span></span></code></pre><ul><li>指定索引返回字符串</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">charAt</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">));</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // e</span></span></code></pre><ul><li>指定索引返回字符串的 ASCII 码</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">charAt</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">));</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 101 -- e的ASCII码</span></span></code></pre><ul><li>指定字符的 ASCII 码返回字符</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">String</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">fromCharCode</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">80</span><span style="--s-dark:#666666;--s-light:#999999;">));</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // P -- P的ASCII码为80</span></span></code></pre><ul><li>查询下标并返回其 ASCII 码</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">charCodeAt</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">));</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 101 -- e的ASCII码</span></span></code></pre><ul><li>指定索引和长度返回字符串 <ul><li>substr(‘num’,‘sum’)</li><li>num 开始下标，sum 长度</li></ul></li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">substr</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">));</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // el</span></span></code></pre><h4 id="截取字符串" tabindex="-1">截取字符串 <a class="header-anchor" href="#截取字符串" aria-hidden="true">#</a></h4><ul><li>substring(‘num1’,‘num2’) <ul><li>num1 开始位置，num2 结束位置</li><li>不包含 num2 下标的字符，区间表示为 [num1，num2)</li><li>会自动取从小到大的顺序，所以写反也没关系</li><li>substring(‘num1’)：相当于 [num1，∞)</li></ul></li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">substring</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 9</span><span style="--s-dark:#666666;--s-light:#999999;">));</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">substring</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">9</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">));</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//结果为elloWorl</span></span></code></pre><ul><li>slice <ul><li>正数同上，截取索引可以为负数，（-5，-1）截取倒数第 5 位~最后一位，不包含最后一位的字符</li><li>正数从 1 开始数，倒数第一个是 -1</li></ul></li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">slice</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">-</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">5</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">));</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 结果为Worl</span></span></code></pre><h4 id="转换（不常用）" tabindex="-1">转换（不常用） <a class="header-anchor" href="#转换（不常用）" aria-hidden="true">#</a></h4><ul><li>LowerCase 转小写</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">helloWORLD</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> new_str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">LowerCase</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">new_str</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // helloworld</span></span></code></pre><ul><li>toUpperCase 转大写</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">helloWORLD</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> new_str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">toUpperCase</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">new_str</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // HELLOWORLD</span></span></code></pre><h4 id="查找" tabindex="-1">查找 <a class="header-anchor" href="#查找" aria-hidden="true">#</a></h4><ul><li>match</li></ul><p>通过指定字符串查找，可以匹配一个或者多个字符，如果找到会直接返回查找的字符串，没有则返回 <code>null</code></p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">helloworld</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">alert</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">（ </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">match</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">hell</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> )；</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// hell</span></span></code></pre><ul><li>search</li></ul><p>匹配字符下标，找到返回下标值，找不到返回 <code>-1</code></p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">search</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">m</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">));</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //-1</span></span></code></pre><h4 id="替换" tabindex="-1">替换 <a class="header-anchor" href="#替换" aria-hidden="true">#</a></h4><p>replace( value, newval )</p><p>查找第到第一个与 <code>value</code> 匹配的字符或者字符串，将它替换成 <code>newval</code></p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">replace</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">o</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 123</span><span style="--s-dark:#666666;--s-light:#999999;">));</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// hell123world</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">replace</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">ell</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 123</span><span style="--s-dark:#666666;--s-light:#999999;">));</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// h123oworld</span></span></code></pre><h4 id="分割" tabindex="-1">分割 <a class="header-anchor" href="#分割" aria-hidden="true">#</a></h4><p>split( val );</p><p>以 <code>val</code> （val 可以是字符串）将字符串分割，分别放入数组中</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">split</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">o</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">));</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 返回为：hell,w,rld</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> s</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">split</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">o</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 当我将它付给变量s时，返回s的类型为object</span></span></code></pre><blockquote><p>注：上面的修改字符串的方法都是不会改变原数组的，只是改变了返回值</p></blockquote><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-hidden="true">#</a></h3><ul><li>数组也是一个特殊的对象类型</li></ul><h4 id="创建" tabindex="-1">创建 <a class="header-anchor" href="#创建" aria-hidden="true">#</a></h4><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr1</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [];</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr2</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Array</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr3</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Array</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span></code></pre><h4 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-hidden="true">#</a></h4><ul><li>indexOf(‘val’) 查询值 val,返回下标</li><li>pop</li><li>shift</li><li>unshift</li><li>jion</li><li>sort 排序</li><li>reverse 反向</li><li>concat 连接数组</li><li>Array.isArray() 判断数组</li><li>filter 过滤，去重 <ul><li>return self.indexOf(item) === index</li></ul></li><li>map 遍历数组，不改变原数组</li><li>forEach 遍历数组，改变原数组</li></ul><h4 id="类数组" tabindex="-1">类数组 <a class="header-anchor" href="#类数组" aria-hidden="true">#</a></h4><p>一个对象有规律数字的属性名（下标），并且有 length 属性，可以通过普通的 for 来遍历的对象</p><h4 id="冒泡排序" tabindex="-1">冒泡排序 <a class="header-anchor" href="#冒泡排序" aria-hidden="true">#</a></h4><ul><li>虚拟数组思想</li><li>两数交换位置</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">j</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">j</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">],</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">j</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">j</span><span style="--s-dark:#666666;--s-light:#999999;">])][</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">0</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span></code></pre><h3 id="json" tabindex="-1">json <a class="header-anchor" href="#json" aria-hidden="true">#</a></h3><ul><li>实际上来说是一个字符串类型</li><li>{}内的内容所有的内容必须用双引号</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> json</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">{&quot;name&quot;:&quot;刘谣&quot;，&quot;age&quot;:&quot;20&quot;}</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><ul><li>所有的数据传输都是字符串形式</li></ul><h4 id="方法-1" tabindex="-1">方法 <a class="header-anchor" href="#方法-1" aria-hidden="true">#</a></h4><ul><li>JSON.stringify() 反序列化，将对象转换成 json 字符串格式</li><li>JSON.parse() 序列化，将 json 字符串转换成 object 对象，常用</li></ul><h3 id="转换" tabindex="-1">转换 <a class="header-anchor" href="#转换" aria-hidden="true">#</a></h3><h4 id="number" tabindex="-1">Number() <a class="header-anchor" href="#number" aria-hidden="true">#</a></h4><p>对一个字符串整体进行转换，非法的就转换成 NaN</p><p>出现 NaN 的情况：</p><ul><li>进行了非法的数学运算 (如字符串,undefined,{},json)</li></ul><blockquote><p>六种转换成 false：</p><ul><li>0，“” 空字符串，undefined，null，false，NaN</li><li>NaN === NaN，NaN == NaN 都是 false，NaN 自己都不等于自己(在 es6 中这个坑被填了)</li></ul><p>转换成 0：&quot;&quot;空字符串，null,false,空数组[ ]</p><p>转换成 NaN：&quot;&quot;空字符串,布尔值，空数组</p></blockquote><h4 id="parseint" tabindex="-1">parseInt() <a class="header-anchor" href="#parseint" aria-hidden="true">#</a></h4><p>从左到有右检查，遇到非数字就停止，转换出前面的数字，还有取整的功能</p><h3 id="math-函数" tabindex="-1">Math 函数 <a class="header-anchor" href="#math-函数" aria-hidden="true">#</a></h3><ul><li><p>Math.ceil() – 向上取整</p></li><li><p>Math.floor() – 向下取整</p></li><li><p>Math.round() – 四舍五入</p></li><li><p>Math.random() – 随机数</p></li><li><p>Math.max() – 返回较大的一个值</p></li><li><p>Math.min() – 返回较小的一个值</p></li><li><p>Math.sin() – 三角函数中：接收的是弧度制</p></li></ul><h3 id="判断数据类型" tabindex="-1">判断数据类型 <a class="header-anchor" href="#判断数据类型" aria-hidden="true">#</a></h3><h4 id="三目运算" tabindex="-1">三目运算 <a class="header-anchor" href="#三目运算" aria-hidden="true">#</a></h4><ul><li>适合 <code>if/else</code> 类型</li><li>表达式是否成立 ? 成立输出 1 ： 不成立输出 2 ;</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#666666;--s-light:#999999;"> ;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ==</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ?</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> :</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;"> ;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">等价于</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ==</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ?</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> :</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;"> ;</span></span></code></pre><h4 id="switch-语句" tabindex="-1">switch 语句 <a class="header-anchor" href="#switch-语句" aria-hidden="true">#</a></h4><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">switch</span><span style="--s-dark:#666666;--s-light:#999999;">(){</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    case</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        输出1</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">；</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">        break</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">；</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    case</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">：</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        输出2</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">；</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        break</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">；</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    default</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">：</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        输出其他</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">；</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        break</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">；</span></span>
<span class="line"><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">}</span></span></code></pre><h4 id="自增自减" tabindex="-1">自增自减 <a class="header-anchor" href="#自增自减" aria-hidden="true">#</a></h4><ul><li>后自增：先赋值后自增（自减同理）</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> i</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 20</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> i</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">++</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 20</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">i</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 21</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><ul><li>前自增：先自增后赋值（自减同理）</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> i</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 20</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ++</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">i</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 21</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">i</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 21</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><h4 id="循环" tabindex="-1">循环 <a class="header-anchor" href="#循环" aria-hidden="true">#</a></h4><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//在网页中输出内容</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">write</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><blockquote><p><code>注</code></p><p>写在 window.onload 里面的代码会覆盖掉 body 里面的所有内容</p></blockquote><h3 id="数组-1" tabindex="-1">数组 <a class="header-anchor" href="#数组-1" aria-hidden="true">#</a></h3><h4 id="创建数组" tabindex="-1">创建数组 <a class="header-anchor" href="#创建数组" aria-hidden="true">#</a></h4><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">];</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 内容有几个长度为几</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 后面两种当数组中只有一个值时，长度为那个值</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Array</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Array</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 不过es6填了这个坑，一个时就一个元素，长度为1</span></span></code></pre><h4 id="修改数组" tabindex="-1">修改数组 <a class="header-anchor" href="#修改数组" aria-hidden="true">#</a></h4><ol><li>修改长度：超出长度的内容就没有了</li></ol><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 6</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#B8A965;--s-light:#998418;">length</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //结果为 1,5,3</span></span></code></pre><ol start="2"><li>修改内容：将数组中的某个内容替换掉</li></ol><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 6</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">0</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">hello</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //结果为 hello,5,3，6</span></span></code></pre><ol start="3"><li>增加内容：再数组中的最后增加内容</li></ol><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 6</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">0</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">OK</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //结果为 1,5,3,6,OK</span></span></code></pre><h4 id="稀疏数组" tabindex="-1">稀疏数组 <a class="header-anchor" href="#稀疏数组" aria-hidden="true">#</a></h4><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#B8A965;--s-light:#998418;">length</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //5</span></span></code></pre><h4 id="方法-2" tabindex="-1">方法 <a class="header-anchor" href="#方法-2" aria-hidden="true">#</a></h4><blockquote><p><code>注：</code> 这些方法都会改变原数组</p></blockquote><ol><li>添加元素 (<code>返回新长度</code>)</li></ol><ul><li>在数组开头</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">unshift</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">hello</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // hello,1,2,3,4,5</span></span></code></pre><ul><li>在数组末尾</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">push</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">hello</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 1,2,3,4,5,hello</span></span></code></pre><ol start="2"><li>删除元素 (<code>返回删除的元素</code>)</li></ol><ul><li>删除首个元素并返回</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">shift</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //结果为 2,3,4,5</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">shift</span><span style="--s-dark:#666666;--s-light:#999999;">());</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //结果为 1</span></span></code></pre><ul><li>删除末尾元素</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">pop</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //结果为 1,2,3,4</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">pop</span><span style="--s-dark:#666666;--s-light:#999999;">());</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //结果为 5</span></span></code></pre><ol start="3"><li>splice</li></ol><p>添加，删除，替换一体</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/*</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">第一位数：在第几个位置</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">第二个数：0 为不删除，1/2/3代表删几个</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">第三个数：添加或者替换的元素</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">*/</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//在第二个位置上添加hello</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">splice</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">hello</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //返回结果 1,hello,2,3,4,5</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//删除第二个后面两个元素</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">splice</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //返回结果 1,4,5</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//将第二个元素换成hello</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">splice</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">hello</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //返回结果 1,hello,3,4,5</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//可以添加多个值，替换同理</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">splice</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">a</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">b</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">c</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">d</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><h4 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-hidden="true">#</a></h4><ul><li>sort() 默认排序，只笔每个元素的首位，没卵用</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">sort</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> b</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> b</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> b</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span></code></pre><ul><li><p>冒泡法 <code>数组元素在10个以内</code> <code>性能差</code></p><ul><li>‘&gt;’ 调换位置（返回值为正时）</li><li>‘0’ 不调换位置（相等）</li><li>‘&lt;’ 不调换位置（返回值为负）</li></ul></li><li><p>二分法 <code>当数组元素在10个以上时</code></p></li></ul><h4 id="别的操作" tabindex="-1">别的操作 <a class="header-anchor" href="#别的操作" aria-hidden="true">#</a></h4><ul><li>reverse() 将数组颠倒</li><li>concat() 数组和数组拼接，不会改变原数组</li><li>slice(1,3) 截取，从第二位到第三位，不包括第四位</li><li>join 拼接成字符串，用某元素把数组拼接成字符串</li><li>Array.isArray( arr ) 判断数组，返回值为 true/false</li></ul><h3 id="ecmascript5" tabindex="-1">ECMAscript5 <a class="header-anchor" href="#ecmascript5" aria-hidden="true">#</a></h3><blockquote><p>是 javascript 的执行标准</p></blockquote><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-hidden="true">#</a></h4><ul><li>value ：是数组的项</li><li>index ：当前项的下标</li><li>arr ：是数组本身</li></ul><ol><li>forEach 遍历数组</li></ol><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">forEach</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> index</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {});</span></span></code></pre><ol start="2"><li>map 计算</li></ol><p>有返回值，返回值是一个数组，return 是什么就是什么</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">map</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span></code></pre><ol start="3"><li>filtre 过滤</li></ol><p>有返回值，返回值是一个数组，retuern 为真（true）的 value 值会进入数组</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">filter</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#666666;--s-light:#999999;"> &gt;</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span></code></pre><ol start="4"><li>every 有点判断的意思</li></ol><p>每一个为 true，才返回 true，否则为 false</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">every</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> !=</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">h</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //是否每个值都等于h</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span></code></pre><ol start="5"><li>some 也有判断的意思</li></ol><p>每一个为 true，才返回 true，否则为 false</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">some</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ==</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">h</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //是否有一个值都等于h</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span></code></pre><blockquote><p><code>随机数：</code> Math.random() 随机一个 0~1 之间的数，不包括 1</p></blockquote><h2 id="节点" tabindex="-1">节点 <a class="header-anchor" href="#节点" aria-hidden="true">#</a></h2><ul><li>元素节点</li><li>文本节点</li><li>属性节点</li><li>注释节点</li></ul><h3 id="获取节点" tabindex="-1">获取节点 <a class="header-anchor" href="#获取节点" aria-hidden="true">#</a></h3><p>obj.childNodes 获取所有的子节点</p><p>【子节点：IE8 及以下都会忽略空格和换行】</p><h4 id="obj-children-获取所有的子元素节点" tabindex="-1">obj.children 获取所有的子<code>元素</code>节点 <a class="header-anchor" href="#obj-children-获取所有的子元素节点" aria-hidden="true">#</a></h4><p>obj.nodeType 获取节点的类型，返回其编号 元素节点：1 属性节点：2 文本节点：3 注释节点：8</p><p>4、obj.tagName 获得<code>元素节点</code>的名称</p><p>5、obj.nodeName 获取所有节点的<code>节点名称</code></p><p>6、obj.getAttributeNode() 获取指定节点的指定属性节点名称，【不常用】</p><p><code>以下方法不常用</code></p><p>7、obj.firstChild 获取第一个子节点</p><p>8、obj.lastChild 获取最后一个子节点</p><p>9、obj.firstElementChild 获取第一个子元素节点，【不兼容 IE8，一般不用】</p><p>10、obj.lastElementChild 获取最后一个子元素节点，【同上】</p><p>1obj.nextSibling 下一个兄弟节点【同上】</p><p>1obj.nextElementSibling 下一个兄弟元素节点【同上】</p><p>1obj.previousSibling 上一个兄弟节点【同上】</p><p>14、obj.previousElementSibling 上一个兄弟元素节点【同上】</p><h4 id="_15、obj-parentnode-获取父节点，没有兼容性问题" tabindex="-1">15、obj.parentNode 获取父节点，没有兼容性问题 <a class="header-anchor" href="#_15、obj-parentnode-获取父节点，没有兼容性问题" aria-hidden="true">#</a></h4><p>16、obj.offsetParent 返回定位了的父级元素，它相对于谁定位的，谁就是他的定位父级</p><p>17、obj.childElementCount 获取子元素节点的个数【不兼容 IE8 及以下】</p><h4 id="常用方法" tabindex="-1">常用方法: <a class="header-anchor" href="#常用方法" aria-hidden="true">#</a></h4><p>children , offsetParent , parentNode ， tagName</p><h4 id="创建一个元素节点" tabindex="-1">创建一个元素节点 <a class="header-anchor" href="#创建一个元素节点" aria-hidden="true">#</a></h4><p>document.createElement(obj) 以前之前用“ innerHTML += ” ，添加标签时，实际上只是一个字符串，在使用时还需要获取元素 obj.appendChild(div);</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-html"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> id</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">wrap</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> oWrap</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> ducoment</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getElementById</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">wrap</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> div</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">createElement</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">div</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //相比“ += ”的方法，这种方法对于添加事件，添加id更方便</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  div</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">onclick</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">这是一个div元素节点</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  };</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  div</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">id</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">box</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //在oWrap最后面添加一个节点，只能是节点，不能加 &quot;&quot; ，不然就变成字符串</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  oWrap</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">appendChild</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">div</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //innerHTML 在只是写一个文本时，用这个更合适</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span></code></pre><h4 id="克隆节点" tabindex="-1">克隆节点 <a class="header-anchor" href="#克隆节点" aria-hidden="true">#</a></h4><p>节点.cloneNode(bool); 参数默认为 false； true 深度克隆，复制所有 false 浅度克隆，不复制内容</p><p>添加子节点 obj.insertBefore(要添加的子节点，需要放在哪个子节点的前面)</p><p>删除子节点 obj.removeChild(节点) 通过父节点删除子节点</p><p>替换子节点 obj.replaceChild(子节点，被替换的节点)</p><h2 id="css-试图模式" tabindex="-1">css 试图模式 <a class="header-anchor" href="#css-试图模式" aria-hidden="true">#</a></h2><h3 id="client" tabindex="-1">client <a class="header-anchor" href="#client" aria-hidden="true">#</a></h3><p>获取文档可视区域的宽高（不包括滚动条） clientWidth clientHeight</p><p>获取边框厚度 clientTop 元素上边框厚度 4、clientLeft 元素左边框厚度</p><h3 id="inner" tabindex="-1">inner <a class="header-anchor" href="#inner" aria-hidden="true">#</a></h3><p>获取窗口的可视区域宽高（包括滚动条） 【IE8 以下不兼容】 innerWidth innerHeight</p><h3 id="offset-与定位有关" tabindex="-1">offset 与定位有关 <a class="header-anchor" href="#offset-与定位有关" aria-hidden="true">#</a></h3><p>获取元素的实际大小，即 content+padding+border，即写的是宽高是多少就是多少 offsetWidth offsetHeight</p><p>获取从元素的<code>外边框开始</code>到定位父级的<code>内边框</code>距离（不包括定位父级的边框） offsetTop 元素顶部到定位父级的顶部的距离 4、offsetLeft 元素左部到定位父级的左部的距离</p><h3 id="scroll" tabindex="-1">scroll <a class="header-anchor" href="#scroll" aria-hidden="true">#</a></h3><p>获取元素 Content+padding 的大小，当元素内容的东西超出的时候，会把超出的部分算进去；当超出时，下 padding 可能就没有了，这时算的就是上 padding 到内容底部的距离。 【当元素有 overflow：hidden 时，得到的是上下 padding+content+超出的部分】 scrollWidth scrollHeight</p><p>获取 X，Y 轴方向被挡住的那部分大小 scrollTop 4、scrollLeft</p><h3 id="page" tabindex="-1">page <a class="header-anchor" href="#page" aria-hidden="true">#</a></h3><p>pageY 到 document 的 y 轴方向的距离，包括没有显示的部分</p><h2 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-hidden="true">#</a></h2><p>DOM 零级事件，绑定 on+&quot;…&quot;事件 即 obj.onclick，这种事件没有兼容性问题 只同一个对象绑定的相同事件只能有一个 事件对象 e</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">onclick</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //兼容IE</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  e</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> e</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> window</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">event</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //事件对象</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span></code></pre><p>监听事件 DOM 二级事件 obj.addEventListener(“事件类型”，事件函数(回调函数)，布尔值); 兼容 IE：obj.attachEvent(“事件类型”，事件函数)； IE 不支持捕获 布尔值： 默认 false：冒泡； true：捕获；（与冒泡相反，从最上面的事件向下调用）</p><p>事件捕获：父级事件向下执行到子级事件； 捕获比冒泡优先，并且比冒泡执行快一点</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">obj</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">addEventListener</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">click</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">stopPropagation</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //也能阻止冒泡事件</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span></code></pre><p>事件冒泡 子集将一直向上调用父级事件，直到 document</p><p>阻止事件冒泡 e.stopPropagation(); 兼容 IE：e.cancelBubble = true; true 阻止，false 不阻止</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">obj</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">onclick</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  e</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> e</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> window</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">event</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">cancelBubble</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> true</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //IE写法</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">stopPropagation</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //阻止冒泡事件，即所有的父级事件都不执行</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span></code></pre><p>4、解绑监听事件 obj.removeEventListener(“事件类型”，函数名); 兼容 IE obj.detachEvent(“事件类型”，函数名);</p><h3 id="事件代理" tabindex="-1">事件代理 <a class="header-anchor" href="#事件代理" aria-hidden="true">#</a></h3><p>触发事件源的元素 e.target e.srcElement</p><h3 id="dom-零级事件" tabindex="-1">DOM 零级事件 <a class="header-anchor" href="#dom-零级事件" aria-hidden="true">#</a></h3><p>obj.onclick = function (){} DOM 二级事件 obj.addEventListener(“click”,function(){});</p><p>DOM 零级事件即使不点击时，也开辟了内存把 function 存起来了，并将 obj 的 onclick 的属性指向这个 function； 而 DOM 二级事件则是，当触发这个事件时才会开辟内存读取这个 function，没有触发时不会读取 function</p><h3 id="阻止默认行为" tabindex="-1">阻止默认行为 <a class="header-anchor" href="#阻止默认行为" aria-hidden="true">#</a></h3><h4 id="oncontextmenu" tabindex="-1">oncontextmenu <a class="header-anchor" href="#oncontextmenu" aria-hidden="true">#</a></h4><p>检测鼠标右键单击 阻止默认行为：e.preventDefault(); IE8 及以下：e.returnValue = false; true 不阻止， false 阻止；</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//return false也能阻止默认行为，但是只能在DOM零级事件中使用</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">oncontextmenu</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> false</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//而在DOM二级事件中就无法使用了</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">addEventListener</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">contextmenu</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> false</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//零级二级都可以</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">oncontextmenu</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //阻止默认行为</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //鼠标右键时不弹窗</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">preventDefault</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //IE</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">returnValue</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> false</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //兼容写法</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">preventDefault</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ?</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">preventDefault</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> :</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">returnValue</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> false</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span></code></pre><h4 id="onmousedown" tabindex="-1">onmousedown <a class="header-anchor" href="#onmousedown" aria-hidden="true">#</a></h4><p>左键右键都能够监听 （不能在这里面阻止默认行为）</p><h3 id="鼠标滚动事件" tabindex="-1">鼠标滚动事件 <a class="header-anchor" href="#鼠标滚动事件" aria-hidden="true">#</a></h3><h4 id="document-onscroll" tabindex="-1">document.onscroll <a class="header-anchor" href="#document-onscroll" aria-hidden="true">#</a></h4><p>监听浏览器的滚动条变化，只要滚动条的滑块发生了变化就会被触发；</p><h4 id="document-onmousewheel" tabindex="-1">document.onmousewheel <a class="header-anchor" href="#document-onmousewheel" aria-hidden="true">#</a></h4><p>只监听鼠标滚轮的滚动事件，而直接拖动滚动条的滑块是不会被触发的； 【火狐浏览器没有 onmousewheel 属性] 火狐浏览器写法：document.DOMmouseScroll 【但是在火狐里面不能以 DOM 零级的方式绑定滚轮事件，所以要 DOM 二级事件写法】</p><p>判断滚轮方向： e.wheelDelta 向下滚动 ： -120， 向上滚动 ： +120；</p><p>火狐 ： e.detail 向下滚动 ： +3， 向上滚动 ： -3；</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">onmousewheel</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //滚轮方向</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">wheelDelta</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//兼容火狐浏览器：DOMmouseScroll,但是在火狐里面不能以DOM零级的方式绑定滚轮事件</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">documnet</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">DOMmouseScroll</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {};</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //不会触发</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">addEventListener</span><span style="--s-dark:#666666;--s-light:#999999;">(</span></span>
<span class="line"><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">  &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">DOMMoueScroll</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  function</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    e</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> e</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> window</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">event</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">detail</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  },</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  false</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><h3 id="鼠标滚轮事件兼容" tabindex="-1">鼠标滚轮事件兼容 <a class="header-anchor" href="#鼠标滚轮事件兼容" aria-hidden="true">#</a></h3><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//用户写的函数</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> wheel</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> d</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">d</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //鼠标滚动方向的判断数值</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">事件处理函数</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//调用自定义滚轮函数</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">mouseWheel</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> wheel</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//鼠标滚轮兼容函数</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> mouseWheel</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">dom</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> efn</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> type</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //真正的事件处理函数，用来处理很多统一的值</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    e</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> e</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> window</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">event</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    //统一滚动方向数值，+1向上，-1向下</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> direction</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">wheelDelta</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> /</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 120</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">detail</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> /</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    //每次调用fn之后改变this指向，并且把鼠标滚动方向，数值都传出去给用户的wheel函数</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    //判断用户函数的返回值是否为false，即用户是否要阻止浏览器的默认行为</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">efn</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">call</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">dom</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> e</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> direction</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> false</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      //判断是否为IE8及以下</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">dom</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">addEventListener</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">preventDefault</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //阻止默认行为</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> else</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">returnValue</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> false</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //判断浏览器，火狐与其他浏览器</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">dom</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">onmousewheel</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    //其他浏览器</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    type</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">mousewheel</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> else</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    //火狐浏览器</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    type</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">DOMMouseScroll</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //判断IE浏览器，决定绑定方式</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">dom</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">addEventListener</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    dom</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">addEventListener</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">type</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> else</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    dom</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">attachEvent</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">on</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> type</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p><code>注：所有on....事件的默认值都为null</code></p><h2 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-hidden="true">#</a></h2><h2 id="表单事件" tabindex="-1">表单事件 <a class="header-anchor" href="#表单事件" aria-hidden="true">#</a></h2><p>onblur 失去焦点 onfocus 获得焦点</p><p>obj.focus(); 给元素自动聚焦，必须是能获取到光标的元素</p><p>obj.onchange 当能获得焦点的元素内容被改变并且元素失去焦点之后会被触发，优先级比 onblur 高一点</p><p>obj.oninput 当内容改变时马上触发</p><h2 id="键盘事件" tabindex="-1">键盘事件 <a class="header-anchor" href="#键盘事件" aria-hidden="true">#</a></h2><p>obj.onkeydown 当按下键盘时立即触发</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">obj</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">onkeydown</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> funcion</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">){</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">key</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//直接返回按键名称</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">code</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//返回带标识的 按键名称</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">keyCode</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//按键的编码</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>obj.onkeypress 按下键盘触发【只会相应数字键，字母键等能输出文字的键，不响应功能键】</p><p>obj.onkeyup 按键抬起时触发</p><p>判断 alt 和 ctrl 有没有触发 e.altKey e.ctrlKey</p><h2 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a></h2><p>【正则匹配的是连续性的字符】</p><p>match 方法 根据字符串查找相同的字符串，符合条件的字符串放到数组中并返回</p><ul><li>正则表达式可以直接写中文</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> /</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">学习</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">/</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //字面量方式  str既是一个正则规则</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//构造函数形式</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> reg</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> RegExp</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">学习</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //正则</span></span></code></pre><h3 id="text-str-正则的方法" tabindex="-1">text(str) 正则的方法 <a class="header-anchor" href="#text-str-正则的方法" aria-hidden="true">#</a></h3><p>检测 str 中有没有符合正则规则匹配的字符串 有符合条件的：返回 true 没有：返回 false</p><h3 id="元字符" tabindex="-1">元字符 <a class="header-anchor" href="#元字符" aria-hidden="true">#</a></h3><p>【在正则有特殊意义】</p><p>\\d ：匹配数字 \\D ：匹配非数字</p><p>\\s ：匹配空格 \\S ：非 k 空格</p><p>\\w ：数字、字母、下划线 \\W ：非字符，除了\\w 之外的所有字符</p><p>\\b ：独立部分/单词边界</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-"><span class="line"><span>var reg = /\\bhappy\\b/; //只会匹配为happy的完整的独立的单词</span></span></code></pre><p>\\B ：非单词边界</p><p>. ：匹配任意的字符，不包括\\n \\r</p><p>\\r ：制表符，【基本用不到】</p><p>\\ ：反斜杠，转移，会把紧跟着的字符转义为别的意义</p><h4 id="量词" tabindex="-1">量词 <a class="header-anchor" href="#量词" aria-hidden="true">#</a></h4><p>规则后面写，给某一个相同的规则设定连续出现多少次</p><blockquote><p>量词的匹配模式： 贪婪匹配：默认从最高次数匹配，知道底线次数；如果不满足底线次数，则跳过。 var reg = /\\d{2,5}/;【从 5 次开始匹配】</p></blockquote><blockquote><p>懒惰匹配：从低次开始匹配，在贪婪模式后加“ ？”； var reg = /\\d{2,5}?/;【从 2 次开始匹配】</p></blockquote><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> reg</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> /</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\d</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">{5}</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">/</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //匹配5个连续数字</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> reg</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> /</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\d</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">{1,9}</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">/</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //最少1个，最多9个</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> reg</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> /</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\d</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">{1,}</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">/</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //最少1个，上不封顶</span></span></code></pre><ul><li>–&gt; {0,} 0 到正无穷，所有，不限个数</li></ul><ul><li>–&gt; {1,} 1 到正无穷，最少要有一个 ? --&gt; {0,1} 要么没有，要么一个</li></ul><h4 id="修饰符-标识符" tabindex="-1">修饰符/标识符 <a class="header-anchor" href="#修饰符-标识符" aria-hidden="true">#</a></h4><p>g ：golbal 全局匹配</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-"><span class="line"><span>var str = &quot;123abc456def&quot;;</span></span>
<span class="line"><span>var reg = /\\d/g;</span></span></code></pre><p>i ：忽略大小写</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-"><span class="line"><span>var str = &quot;123abc456def&quot;;</span></span>
<span class="line"><span>var reg = /ABC/ig;</span></span></code></pre><p>m ：换行匹配</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-"><span class="line"><span>var str = &quot;\\n123abc456def\\n&quot;;</span></span>
<span class="line"><span>var reg = /ABC/igm;</span></span></code></pre><p>() ：组/子项，只会匹配一个整体 \\1 代表第一个子集匹配的内容 \\2 代表第二个子集匹配的内容</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-"><span class="line"><span>var str = &quot;abccccabc&quot;;</span></span>
<span class="line"><span>var reg = /adc+/g; // [abcccc,abc]</span></span>
<span class="line"><span>var reg2 = /(abc)+/g; //[abc,abc]</span></span></code></pre><p>[] ：字符集 字段：返回两个字符 Unicode 码之间的所有码对应的字符 [0-9][a-z][A,Z] 可以一起写[0-9a-zA,Z][()//?+*{}-] 这些在字符串中都是无意义的，普通符号 [059] 匹配 0 或者 5 或者 9</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-"><span class="line"><span>var str = &quot;14376423987&quot;;</span></span>
<span class="line"><span>var reg = /[1-5]/g; //[1,4,3,4,2,3]</span></span></code></pre><p>中文编码 ：\\u4e00-\\u9fa5</p><p>| ：或者，“|”前面的一个整体和后面的一个整体</p><p>^ ：以什么开始的字符 【在字符集中表示除了^跟着的字符以外的东西】</p><p>$ ：以什么结束的字符</p><h2 id="存储-缓存数据" tabindex="-1">存储/缓存数据 <a class="header-anchor" href="#存储-缓存数据" aria-hidden="true">#</a></h2><h3 id="cookie" tabindex="-1">cookie <a class="header-anchor" href="#cookie" aria-hidden="true">#</a></h3><p>上限 4kb，数据默认有时间限制，默认是一次会话的时间（打开一个窗口，关闭后就结束） 过期时间可以设置：每次与后台交互请求的时候，都会自动发送 cookie 过去，如果遇上和 cookie 里的数据没有很大关系的请求时，发送 cookie 就是占用资源</p><blockquote><p>大部分的 cookie 必须在服务器下存储，cookie 是在 document 下的 传输的必须是字符串，键值对</p></blockquote><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">cookie</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name=刘谣</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">cookie</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">age=20</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//设置到期时间,一天</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">cookie</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span></span>
<span class="line"><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">  &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name=刘谣;expire</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Date</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Data</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">getTime</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 24</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 60</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 60</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1000</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">toUTCString</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span></code></pre><h3 id="localstorage-和-sessionstorage" tabindex="-1">localStorage 和 sessionStorage <a class="header-anchor" href="#localstorage-和-sessionstorage" aria-hidden="true">#</a></h3><p>同： 存储的数据没有上限 在 window 下</p><p>异： localStorage：永久保存，除非认为清楚或者清楚浏览器缓存</p><blockquote><p>不需要服务器也可以</p></blockquote><p>sessionStorage：一次会话的时间，并且不能设置过期时间</p><p>【以上三种都遵守同源策略】</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">localStorage</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">setItem</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">刘谣</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">localStorage</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">setItem</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">age</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">20</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><p>用 json 存储数据</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">localStorage</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">setItem</span><span style="--s-dark:#666666;--s-light:#999999;">(</span></span>
<span class="line"><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">  &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">json</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  JSON</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">stringify</span><span style="--s-dark:#666666;--s-light:#999999;">({</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    name</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">刘谣</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    age</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">20</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  })</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//获取数据，获取到的就是JSON的字符串内容</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">localStorage</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getItem</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">json</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//利用json的反序列化转成对象</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">JSON</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">parse</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">localStorage</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getItem</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">json</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//删除某一个数据</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">localStorage</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">removeItem</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">json</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//删除所有数据</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">localStorage</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">clear</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">json</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><h2 id="字符串模板" tabindex="-1">字符串模板 <a class="header-anchor" href="#字符串模板" aria-hidden="true">#</a></h2><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> obj</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  name</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">刘谣</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  age</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">20</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//反引号,所有内容都在 \`\` 里面写</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//所有的换行都会保留</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> \`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">我是</span><span style="--s-dark:#666666;--s-light:#999999;">\${</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">obj</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">，几年</span><span style="--s-dark:#666666;--s-light:#999999;">\${</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">obj</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">age</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">岁</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><h2 id="ajax" tabindex="-1">ajax <a class="header-anchor" href="#ajax" aria-hidden="true">#</a></h2><p>asyncChronous javascript and XML 【同源策略，不可跨域】</p><blockquote><p>在不刷新页面的前提下，更新当前这个页面或者局部的数据； 实现与后台的数据交互，同时在页面进行更新</p></blockquote><p>ajax 是一个<code>对象</code>，必须被 new 执行的对象</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//创建一个ajax对象</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> ajax</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> XMLHttpRequest</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span></code></pre><p>open( get/post , 接口地址 , 是否异步/同步 true(异步)/false(同步) );</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">ajax</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">open</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">get</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">www.baidu.com/xxx</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> true</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><p>send(); 发送到后台</p><p>监听状态，当与后台交互的状态发生变化的时候，就会触发一个函数</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">ajax</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">pnreadystatechange</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;">(){</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    //当前的状态码ajax.readyState</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    //当数据全部接收完成时</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ajax</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">readyState</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">){</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">        //判断服务器的好坏，服务器状态码，http状态码</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">        if</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ajax</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">status</span><span style="--s-dark:#666666;--s-light:#999999;"> &gt;=</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 200</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> ajax</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">status</span><span style="--s-dark:#666666;--s-light:#999999;"> &lt;</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 300</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> ajax</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">status</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 300</span><span style="--s-dark:#666666;--s-light:#999999;">){</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">            //获取的数据反映出来</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">            console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ajax</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">responseText</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">        }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span></code></pre><p>与后台交互时当前的状态码 ajax.readyState 0 ：ajax 已经创建，但是没有调用 open 方法 1 ：open 已经调用，没有 send 发法发送 2 ：已经发送给后台，但是还没有得到数据 3 ：正在接受数据 4 ：数据全部接收完成 【但是也存在有状态码为 4 的时候数据没有接收完成，这时可能是服务器出问题了】</p><p>服务器状态码/http 状态码 ajax.status 大于 200 并且小于 300，或者等于 300 表示服务器没有问题</p><p>当用户的网络很差或者其他情况，后台处理时间很长；后台应该达到一定时间自动关闭这个请求，让用户不需要继续等待了，无法访问</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//一秒后关闭请求</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">setTimeout</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  ajax</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">abort</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //关闭请求</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">},</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1000</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><h3 id="get-和-post-的区别" tabindex="-1">get 和 post 的区别 <a class="header-anchor" href="#get-和-post-的区别" aria-hidden="true">#</a></h3><p>同：都是使用键值对格式，传输数据都是没有上限的 异：但是 get 一般只用来传输小数据，因为 get 的数据（传输）会直接显示在地址栏处，浏览器会对 url 地址栏的字符长度做限制</p><h4 id="get" tabindex="-1">get <a class="header-anchor" href="#get" aria-hidden="true">#</a></h4><p>所有发送的数据都跟在 “？” 后面，在地址栏显示，保密性极差 数据：http:www.baidu.com/xxx?xxxxxx ajax.open(“get”,“http:www.baidu.com/xxx?xxxxxx”,true);</p><h4 id="post" tabindex="-1">post <a class="header-anchor" href="#post" aria-hidden="true">#</a></h4><p>可以在 network 中看到数据 数据前不带 “？” 问号，以字符串形式放在 send 里面，保密性和 get 差不多的，只是不像 get 一样直接在地址栏显示出来 数据：xxxxxx ajax.open(“get”,“http:www.baidu.com/xxx”,true); ajax.send(“xxxxxx”); post 必须设置请求头 ajax.setRequestHeader(“Content-Type”,“xxxxx”)</p><h2 id="jsonp" tabindex="-1">jsonp <a class="header-anchor" href="#jsonp" aria-hidden="true">#</a></h2><p>是一种非正式的传输<code>协议</code> jsonp 是利用了 script 的 src 属性的跨域漏洞，可以去其他不同的服务器拿数据</p><blockquote><p>比如：img 的 src，能够跨域访问别的网页的图片，其他的底层定义的 src 的属性的一些标签也可以实现跨域访问，但是只能显示它本身标签的内容形式</p></blockquote><h3 id="callback" tabindex="-1">callback <a class="header-anchor" href="#callback" aria-hidden="true">#</a></h3><p>回调函数，是 jsonp 里比传的参数</p><h2 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-hidden="true">#</a></h2><p>面向对象编程</p><p>面向过程编程 以过程为中心得编程思想 缺点：不利于扩展</p><h3 id="面向对象三大特征：" tabindex="-1">面向对象三大特征： <a class="header-anchor" href="#面向对象三大特征：" aria-hidden="true">#</a></h3><p>封装、继承、多态</p><p>对象都有的属性：共性 特有的属性：特性</p><p>利用 function 创造一个工厂/流水线</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> age</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> sex</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> obj</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {};</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  obj</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  obj</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">age</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> age</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  obj</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">sex</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> sex</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> obj</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> p1</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">刘谣</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 20</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">男</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><h3 id="new" tabindex="-1">new <a class="header-anchor" href="#new" aria-hidden="true">#</a></h3><blockquote><p>通过 new 关键字执行的函数，new 后面的函数叫做构造函数</p></blockquote><blockquote><p><code>new的特性</code>：</p></blockquote><pre><code>每次执行函数都会在函数内部创建一个对象，最终会把这个对象返回出来，对象是引用性数据类型，所以每次new执行调用函数时，返回的都是一个新的对象
</code></pre><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">字符串1</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //字面量</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    b</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> String</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">字符串2</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">),</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //String方法/内建方法</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    c</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> String</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">字符串</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">); //构造函</span><span style="--s-dark:#FDAEB7;--s-light:#B31D28;--s-dark-font-style:italic;--s-light-font-style:italic;">数</span></span></code></pre><blockquote><p>new 执行构造函数的过程：叫做构造函数的实例化/类的实例化； 构造函数执行结束以后返回的对象：叫做实例/实例化对象</p></blockquote><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> age</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> sex</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">  this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">  this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">age</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> age</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">  this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">sex</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> sex</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> p1</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">刘谣</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 20</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">男</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><blockquote><p>使用 new 会隐式创建一个对象并返回出来，并且构造函数中的 this 会指向 new 创建的那个对象 就不需要 var 一个对象并 return</p></blockquote><blockquote><p>构造函数一般的函数名一般第一个字母大写</p></blockquote><h3 id="原型-prototype" tabindex="-1">原型 prototype <a class="header-anchor" href="#原型-prototype" aria-hidden="true">#</a></h3><blockquote><p>就是一个仓库，并且仓库里的东西都是共享的，里面存储的每个对象都可以共享方法/属性 本质上是一个对象</p></blockquote><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> age</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> sex</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //私有属性--&gt;实例对象的属性</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">  this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">  this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">age</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> age</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">  this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">sex</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> sex</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//原型方法</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">Person</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#B8A965;--s-light:#998418;">prototype</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //共有属性</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  say</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">say</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">say</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  },</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  constructor</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> p1</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">刘谣</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 20</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">男</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">p1</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">say</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">我是</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><h3 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-hidden="true">#</a></h3><p>所有的仓库 “1”.__proto__</p><p><code>__proto__</code>： 原型链，就是一个引用 所有的对象都有的属性，除了 null 和 undefined</p><blockquote><p>原型链：一个对象的原型（__proto**）指向它的构造函数那个仓库的原型对象（prototype）的原型（__proto**） 在找原型时，只会在构造函数的原型里面找，不会构造函数的私有属性里面找</p></blockquote><blockquote><p>实例对象的<code>__proto__</code>指向生成这个实例对象的构造函数的原型对象，既是构造函数的 prototype 原型对象</p></blockquote><p>prototype ： 原型对象 只有函数/方法才有的属性</p><blockquote><p>原型（prototype）是一个对象，这个对象的__proto__指向创建这个对象的构造函数的原型（prototype）</p></blockquote><p>constructor：每个原型都有 constructor 属性，指向当前原型的构造函数</p><blockquote><p>【先创建构造函数，在创建实例化对象】</p></blockquote><h2 id="多态" tabindex="-1">多态 <a class="header-anchor" href="#多态" aria-hidden="true">#</a></h2><blockquote><p>多种状态，根据参数的不同，做出不同的反馈</p></blockquote><h2 id="es6-新增" tabindex="-1">es6 新增 <a class="header-anchor" href="#es6-新增" aria-hidden="true">#</a></h2><h3 id="let-const-class-import" tabindex="-1">let const class import <a class="header-anchor" href="#let-const-class-import" aria-hidden="true">#</a></h3><p>es5 ：全局作用域、局部作用域 es6 ：全局作用域、函数作用域、块作用域</p><h3 id="const-声明常量" tabindex="-1">const 声明常量 <a class="header-anchor" href="#const-声明常量" aria-hidden="true">#</a></h3><p>声明时必须赋值，后续不可以进行第二次等号操作，引用性数据类型是可以向变量里面添加内容的</p><h3 id="解构赋值" tabindex="-1">解构赋值 <a class="header-anchor" href="#解构赋值" aria-hidden="true">#</a></h3><p>本质上是一种模式，只要等号两边的结构值相同，那么等号左边的变量就会被赋予对应的值。</p><ul><li>当右边的值比左边的变量少的时候，左边的变量会自动赋予 undefined</li><li>左右值不对应时，左边多余的变量会赋予 undefined 值，右边多余的时候多余的不管</li><li>默认值：在左边给变量用=赋予默认值，默认值只有在变量匹配到 undefined 的时候才会生效，如果匹配到了值，则使用右边的值</li></ul><h4 id="扩展运算符-“…”" tabindex="-1">扩展运算符 “…” <a class="header-anchor" href="#扩展运算符-“…”" aria-hidden="true">#</a></h4><p>将数组/类数组展开，将展开的东西变为数组</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">b</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//a = 1</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//b = [2,3,4,5]</span></span></code></pre><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  b</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> b</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">b</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//a = 2 , b = 1</span></span></code></pre><h3 id="includes" tabindex="-1">includes() <a class="header-anchor" href="#includes" aria-hidden="true">#</a></h3><p>查找 xxx 字符串，返回布尔值 true/false</p><h3 id="starrswith" tabindex="-1">starrsWith() <a class="header-anchor" href="#starrswith" aria-hidden="true">#</a></h3><p>判断是否以 xxx 字符开头，返回布尔值 true/false</p><h3 id="endswith" tabindex="-1">endsWith() <a class="header-anchor" href="#endswith" aria-hidden="true">#</a></h3><p>判断是否以 xxx 字符结尾，返回布尔值 true/false</p><h3 id="repeat-n" tabindex="-1">repeat(n) <a class="header-anchor" href="#repeat-n" aria-hidden="true">#</a></h3><p>重复原字符串 n 次返回出一个新字符串，并且默认向下取整。</p><ul><li>-1 到+1 取 0</li><li>false 为 0</li><li>true 为 1</li><li>NaN 为 0</li><li>字符串会默认转化为数字，转化不了时为 false，即为 0</li></ul><h2 id="padstart-n-str-padend-n-str" tabindex="-1">padStart(n,str) padEnd(n,str) <a class="header-anchor" href="#padstart-n-str-padend-n-str" aria-hidden="true">#</a></h2><p>es8 的方法 &quot;str&quot;可以没有，默认补全空格 n 小于等于原字符串的长度时，返回原字符串</p><h3 id="padstart" tabindex="-1">padStart() <a class="header-anchor" href="#padstart" aria-hidden="true">#</a></h3><p>往字符串前面补全到设置长度，返回新字符串</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">abc</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">padStart</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">5</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">defg</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//str = &quot;abcde&quot;</span></span></code></pre><h3 id="padend" tabindex="-1">padEnd() <a class="header-anchor" href="#padend" aria-hidden="true">#</a></h3><p>往后补全，与 padStart()同理</p><p>isFinite() 检测是否为一个有限数值 Infinity 无穷大</p><h2 id="es6" tabindex="-1">es6 <a class="header-anchor" href="#es6" aria-hidden="true">#</a></h2><p>Number.isFinite() 不会进行隐式类型转换</p><h4 id="number-isinteger-判断整数" tabindex="-1">Number.isInteger() 判断整数 <a class="header-anchor" href="#number-isinteger-判断整数" aria-hidden="true">#</a></h4><p>有精度问题</p><h3 id="math-函数-1" tabindex="-1">Math 函数 <a class="header-anchor" href="#math-函数-1" aria-hidden="true">#</a></h3><h4 id="math-trunc" tabindex="-1">Math.trunc() <a class="header-anchor" href="#math-trunc" aria-hidden="true">#</a></h4><p>砍掉小数点，会隐式调用 Number 进行类型转换</p><h4 id="math-sign" tabindex="-1">Math.sign() <a class="header-anchor" href="#math-sign" aria-hidden="true">#</a></h4><p>整数返回+1，负数返回-1，-0 返回-0,0 返回 0</p><h4 id="math-cbrt-计算一个立方根" tabindex="-1">Math.cbrt() 计算一个立方根 <a class="header-anchor" href="#math-cbrt-计算一个立方根" aria-hidden="true">#</a></h4><h4 id="math-hypot-勾股定理，求第三边" tabindex="-1">Math.hypot() 勾股定理，求第三边 <a class="header-anchor" href="#math-hypot-勾股定理，求第三边" aria-hidden="true">#</a></h4><p>es7 新增指数运算符 ** 2**3 = 2<em>2</em>2 = 8</p><h2 id="函数的扩展" tabindex="-1">函数的扩展 <a class="header-anchor" href="#函数的扩展" aria-hidden="true">#</a></h2><ul><li>当()里面没有参数默认值的时候，默认声明变量的方式是 var</li><li>当参数有默认值的时候，为 let 声明</li></ul><p>arguments 实际获取的是实参</p><h3 id="临时作用域" tabindex="-1">临时作用域 <a class="header-anchor" href="#临时作用域" aria-hidden="true">#</a></h3><ul><li>当函数的形参有默认值的时候，整个()内会形成一个作用域</li><li>当设置默认值时，会先在()内的作用域里面找，如果没有再在此函数上面的全局作用域中找</li><li>暂时性死区</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span></code></pre><blockquote><p>var 没有暂时性死区</p></blockquote><h3 id="rest-参数-…参数名" tabindex="-1">rest 参数 …参数名 <a class="header-anchor" href="#rest-参数-…参数名" aria-hidden="true">#</a></h3><h3 id="箭头函数" tabindex="-1">箭头函数 () =&gt; {} <a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a></h3><p>箭头右边如果只有一个表达式或者一个变量的时候表示返回这个东西</p><ul><li>通常箭头函数用在回调函数上</li><li>箭头函数，本质上是一个表达式，它没有 this</li><li>this 固定为父作用域的 this</li><li>不能使用 arguments，要使用 rest 参数代替</li><li>不可以把箭头函数当做构造函数</li></ul><h2 id="数组的扩展" tabindex="-1">数组的扩展 <a class="header-anchor" href="#数组的扩展" aria-hidden="true">#</a></h2><h3 id="拷贝数组" tabindex="-1">拷贝数组 <a class="header-anchor" href="#拷贝数组" aria-hidden="true">#</a></h3><h4 id="arr-concat" tabindex="-1">arr.concat(); <a class="header-anchor" href="#arr-concat" aria-hidden="true">#</a></h4><h4 id="…arr" tabindex="-1">…arr <a class="header-anchor" href="#…arr" aria-hidden="true">#</a></h4><h4 id="浅拷贝" tabindex="-1">浅拷贝 <a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a></h4><ul><li>复制数组时，如果原数组的成员里有一个引用性数据，那么复制原数组时，新数组的这个引用性数据和原数组中的是一样的，指向同一个内存地址</li></ul><h3 id="object-assgin-合并对象" tabindex="-1">Object.assgin() 合并对象 <a class="header-anchor" href="#object-assgin-合并对象" aria-hidden="true">#</a></h3><p>Object.assgin(obj1, obj2, obj3) 将 obj2 和 obj3 合并到 obj1 中，改变了 obj1，obj2 和 obj3 不变</p><h3 id="object-keys-键名" tabindex="-1">Object.keys() 键名 <a class="header-anchor" href="#object-keys-键名" aria-hidden="true">#</a></h3><h3 id="object-values-键值" tabindex="-1">Object.values() 键值 <a class="header-anchor" href="#object-values-键值" aria-hidden="true">#</a></h3><h3 id="object-entries-键值对" tabindex="-1">Object.entries() 键值对 <a class="header-anchor" href="#object-entries-键值对" aria-hidden="true">#</a></h3><p>用一个数组存键[0]和值[1]</p><h2 id="判断一个对象是否是数组" tabindex="-1">判断一个对象是否是数组 <a class="header-anchor" href="#判断一个对象是否是数组" aria-hidden="true">#</a></h2><h3 id="array-isarray-obj" tabindex="-1">Array.isArray(obj) <a class="header-anchor" href="#array-isarray-obj" aria-hidden="true">#</a></h3><h3 id="obj-instanceof-array" tabindex="-1">obj instanceof Array <a class="header-anchor" href="#obj-instanceof-array" aria-hidden="true">#</a></h3><h3 id="判断是否有-length-join-constructor-array" tabindex="-1">判断是否有 length/join/constructor === Array <a class="header-anchor" href="#判断是否有-length-join-constructor-array" aria-hidden="true">#</a></h3><h2 id="jq-操作" tabindex="-1">jq 操作 <a class="header-anchor" href="#jq-操作" aria-hidden="true">#</a></h2><h3 id="offset" tabindex="-1">$().offset() <a class="header-anchor" href="#offset" aria-hidden="true">#</a></h3><p>返回一个包含元素到文档顶部（包括未显示的 top/left 区域，包括 margin 值）的 top/left 值得对象</p><h3 id="_1-offset-top-num-left-num" tabindex="-1">1.$().offset({top: num,left: num}) <a class="header-anchor" href="#_1-offset-top-num-left-num" aria-hidden="true">#</a></h3><p>当传值的时候，会强制将元素的 top/left 值变更达到元素距离文档上左的距离只有 num 值</p><h3 id="position" tabindex="-1">$().position() <a class="header-anchor" href="#position" aria-hidden="true">#</a></h3><p>返回一个包含元素到定位父级的 top/left 值的对象</p><h3 id="srolltop" tabindex="-1">$().srollTop() <a class="header-anchor" href="#srolltop" aria-hidden="true">#</a></h3><p>返回当前元素滚动条的高度</p><h3 id="_3-srolltop-num" tabindex="-1">3.$().srollTop(num) <a class="header-anchor" href="#_3-srolltop-num" aria-hidden="true">#</a></h3><p>当有传值的时候，触发一个事件时，回时元素立刻到达设置的 nun 滚动条的高度</p><h3 id="_4、获取宽度" tabindex="-1">4、获取宽度 <a class="header-anchor" href="#_4、获取宽度" aria-hidden="true">#</a></h3><h4 id="_1-width" tabindex="-1">&lt;1&gt; $().width() <a class="header-anchor" href="#_1-width" aria-hidden="true">#</a></h4><p>元素设置的 width 为多少返回的就是多少</p><h4 id="_2-innerwidth" tabindex="-1">&lt;2&gt; $().innerWidth() <a class="header-anchor" href="#_2-innerwidth" aria-hidden="true">#</a></h4><p>返回元素的 width+内部的距离(padding)</p><h4 id="_3-outerwidth" tabindex="-1">&lt;3&gt; $().outerWidth() <a class="header-anchor" href="#_3-outerwidth" aria-hidden="true">#</a></h4><p>返回元素的 width+外部的距离(margin)</p><h4 id="_4-传值的时候" tabindex="-1">&lt;4&gt; 传值的时候 <a class="header-anchor" href="#_4-传值的时候" aria-hidden="true">#</a></h4><ul><li>$().width(num) 会强行改掉元素的宽度 width</li><li>$().innerWidth(num) 会强行改成元素的宽度 width 使得 width+padding 的值等于 num</li><li>$().outerWidth(num) 会强行改成元素的宽度 width 使得 width+margin 的值等于 num</li></ul><h3 id="map-function-index-val" tabindex="-1">$().map(function(index,val){}) <a class="header-anchor" href="#map-function-index-val" aria-hidden="true">#</a></h3><ul><li>index：下标</li><li>val：dom 元素节点</li><li>return：写什么返回什么</li></ul><h3 id="each-function-index-val" tabindex="-1">$().each(function(index,val){}) <a class="header-anchor" href="#each-function-index-val" aria-hidden="true">#</a></h3><ul><li>index：同上</li><li>val：同上</li><li>return：管你写什么，老子就返回操作对象</li></ul><h2 id="获取地理位置" tabindex="-1">获取地理位置 <a class="header-anchor" href="#获取地理位置" aria-hidden="true">#</a></h2><p>使用 navigator 下面的 geolocation()方法获取用户位置</p><ul><li>检测是否支持地理定位</li><li>如果支持，则运行 getCurrentPositio()方法。如果不支持，则向用户显示一段消息。</li><li>如果 getCurrentPosition()运行成功，则向参数 showPosition 中规定的函数返回一个 coordinates 对象</li><li>如果运行失败，则向参数 showError 中规定的函数返回错误信息 <ul><li>Permission denied—用户不允许地理定位</li><li>Position unavailable - 无法获取当前位置</li><li>Timeout - 操作超时</li></ul></li><li>showPosition()函数获得并显示经度和纬度</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> getLocation</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">navigator</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">geolocation</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    navigator</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">geolocation</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getCurrentPosition</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">showPosition</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> showError</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> else</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    alert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Geolocation is not supported by this browser.</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 获取成功</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> showPosition</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">position</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> lat</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> position</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">coords</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">latitude</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //经度</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> lon</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> position</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">coords</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">longitude</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //纬度</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//获取失败运行</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> showError</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">error</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  switch</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">error</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">code</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    case</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> error</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">PERMISSION_DENIED</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">      x</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">innerHTML</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">User denied the request for Geolocation.</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      break</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    case</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> error</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">POSITION_UNAVAILABLE</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">      x</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">innerHTML</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Location information is unavailable.</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      break</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    case</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> error</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">TIMEOUT</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">      x</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">innerHTML</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">The request to get user location timed out.</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      break</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    case</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> error</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">UNKNOWN_ERROR</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">      x</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">innerHTML</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">An unknown error occurred.</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      break</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><h2 id="console-的方法" tabindex="-1">console 的方法 <a class="header-anchor" href="#console-的方法" aria-hidden="true">#</a></h2><ul><li><p>console.log()</p></li><li><p>console.dir()</p></li><li><p>console.error() 以红色报错的形式输出</p></li><li><p>console.time(“tag”); console.timeEnd(“tag”) 设定一个 tag 标记点，打印之间代码执行时间，误差很大</p></li><li><p>Console.assert() 判断第一个参数是否为真，false 的话抛出异常并且在控制台输出相应信息。</p></li><li><p>Console.clear() 清空控制台。</p></li><li><p>Console.count() 以参数为标识记录调用的次数，调用时在控制台打印标识以及调用次数。</p></li><li><p>Console.debug() console.log 方法的别称，使用方法可以参考 Console.log()</p></li><li><p>Console.dir() 打印一条以三角形符号开头的语句，可以点击三角展开查看对象的属性。</p></li><li><p>Console.dirxml() 如果可以，打印 XML/HTML 元素表示的指定对象，或者 JavaScript 对象视图。</p></li><li><p>Console.error() 打印一条错误信息，使用方法可以参考 string substitution。</p></li><li><p>Console._exception() error 方法的别称，使用方法参考 Console.error()</p></li><li><p>Console.group() 打印树状结构，配合 groupCollapsed 以及 groupEnd 方法;</p></li><li><p>Console.groupCollapsed() 创建一个新的内联 group。使用方法和 group 相同，不同的是 groupCollapsed 打印出来的内容默认是折叠的。</p></li><li><p>Console.groupEnd() 结束当前 Tree</p></li><li><p>Console.info() 打印以感叹号字符开始的信息，使用方法和 log 相同</p></li><li><p>Console.log() 打印字符串，使用方法比较类似 C 的 printf 格式输出，可参考 string substitution 。</p></li><li><p>Console.profile() 可以以第一个参数为标识，开始 javascript 执行过程的数据收集。和 chrome 控制台选项开 Profiles 比较类似，具体可参考 chrome profiles</p></li><li><p>Console.profileEnd() 配合 profile 方法，作为数据收集的结束。</p></li><li><p>Console.table() 将数据打印成表格。Console.table [en-US]</p></li><li><p>Console.time() 计时器，接受一个参数作为标识。</p></li><li><p>Console.timeEnd() 接受一个参数作为标识，结束特定的计时器。</p></li><li><p>Console.timeStamp() 添加一个标记到浏览器的 Timeline 或 Waterfall 工具.</p></li><li><p>Console.trace() 打印 stack trace.</p></li><li><p>Console.warn() 打印一个警告信息，使用方法可以参考 string substitution。</p></li></ul><h2 id="ajax-1" tabindex="-1">ajax <a class="header-anchor" href="#ajax-1" aria-hidden="true">#</a></h2><h3 id="get-接收" tabindex="-1">get 接收 <a class="header-anchor" href="#get-接收" aria-hidden="true">#</a></h3><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> xhr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> XMLHttpRequest</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 发送</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">open</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">GET</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> URL</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> true</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> /</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> false</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 监听</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">send</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">onload</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> /</span><span style="--s-dark:#80A665;--s-light:#59873A;"> onreadystatechange</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 判断ajax本身的状态码</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">readyState</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 判断服务器状态码</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;"> ((</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">200</span><span style="--s-dark:#666666;--s-light:#999999;"> &lt;=</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">status</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">status</span><span style="--s-dark:#666666;--s-light:#999999;"> &lt;</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 300</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">status</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 304</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      // 请求成功</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      // 服务器返回的数据</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">      xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">responseText</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span></code></pre><h3 id="post-发送" tabindex="-1">post 发送 <a class="header-anchor" href="#post-发送" aria-hidden="true">#</a></h3><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> xhr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> XMLHttpRequest</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">open</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">POST</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> URL</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> true</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> /</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> false</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 请求头</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">setRequestHeader</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Content-Type</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">application/x-WWW-form-urlencoded</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">send</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">user=xxxx&amp;pwd=xxxx</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">onload</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> /</span><span style="--s-dark:#80A665;--s-light:#59873A;"> onreadystatechange</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 判断ajax本身的状态码</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">readyState</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 判断服务器状态码</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;"> ((</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">200</span><span style="--s-dark:#666666;--s-light:#999999;"> &lt;=</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">status</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">status</span><span style="--s-dark:#666666;--s-light:#999999;"> &lt;</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 300</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">status</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 304</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      // 请求成功</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      // 服务器返回的数据</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">      xhr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">responseText</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span></code></pre><h3 id="jq-封装的方法" tabindex="-1">jq 封装的方法 <a class="header-anchor" href="#jq-封装的方法" aria-hidden="true">#</a></h3><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">$</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">ajax</span><span style="--s-dark:#666666;--s-light:#999999;">({</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  url</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> url</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 根据GET/POST自动选择调用参数</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  method</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">POST/GET</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  data</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    user</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> xxxx</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    pwd</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> xxxx</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  },</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  success</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">data</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 请求成功</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  },</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  error</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 请求失败</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  },</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span></code></pre><h2 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-hidden="true">#</a></h2><blockquote><p>浏览器不允许跨域请求 cors、反向代理、jsonp</p></blockquote><ul><li>实现跨域： <ul><li>通过 script 的 src：属性具备跨域请求资源的能力，JSONP 形式</li><li>CORS 在后台程序里，设置可以让对应域进行访问</li></ul></li></ul><h2 id="jsonp-1" tabindex="-1">jsonp <a class="header-anchor" href="#jsonp-1" aria-hidden="true">#</a></h2><blockquote><p>jsonp 是 json 的一种使用模式</p></blockquote><ul><li>作用：跨域获取数据</li><li>callback：回调函数</li></ul><h2 id="类库-工具-api-的集合" tabindex="-1">类库(工具 api 的集合) <a class="header-anchor" href="#类库-工具-api-的集合" aria-hidden="true">#</a></h2><p>jQuery</p><h2 id="框架" tabindex="-1">框架 <a class="header-anchor" href="#框架" aria-hidden="true">#</a></h2><p>vue react</p><h3 id="jquery" tabindex="-1">jQuery <a class="header-anchor" href="#jquery" aria-hidden="true">#</a></h3><h3 id="each-i-v-s" tabindex="-1">$().each( (i, v, s) =&gt; {} ) <a class="header-anchor" href="#each-i-v-s" aria-hidden="true">#</a></h3><ul><li>i 序号</li><li>v 值，一个个的对象</li><li>s 自己本身</li></ul><h3 id="length" tabindex="-1">$().length <a class="header-anchor" href="#length" aria-hidden="true">#</a></h3><p>长度</p><h3 id="“xxx”-context" tabindex="-1">$(“xxx”, context) <a class="header-anchor" href="#“xxx”-context" aria-hidden="true">#</a></h3><p>$(“xxx”).context 指向给的 context 对象</p><h3 id="get-index" tabindex="-1">$().get(index) <a class="header-anchor" href="#get-index" aria-hidden="true">#</a></h3><ul><li>$()[index] 转原生对象</li><li>转 jq 对象 $(原生对象)</li></ul><h3 id="index" tabindex="-1">$().index() <a class="header-anchor" href="#index" aria-hidden="true">#</a></h3><ul><li>不传值，返回在父级的下标</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-html"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  &lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">p</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> class</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">p1</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">p</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  &lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">p</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">p</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  $</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.p1</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">index</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //0</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span></code></pre><h3 id="data" tabindex="-1">$().data() <a class="header-anchor" href="#data" aria-hidden="true">#</a></h3><blockquote><p>h5 规定自定义标签属性前加上 data</p></blockquote><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-html"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> data-liuyao</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">liuyao</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  &lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#80A665;--s-light:#59873A;">$</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">div</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">data</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">liuyao</span><span style="--s-dark:#666666;--s-light:#999999;">));</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //liuyao</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  &lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span></code></pre><ul><li>removedata() 移除使用 jq 添加的属性【没什么卵用】</li></ul><h2 id="jq-选择器" tabindex="-1">jq 选择器 <a class="header-anchor" href="#jq-选择器" aria-hidden="true">#</a></h2><h3 id="“xxx-first”" tabindex="-1">$(“xxx:first”) <a class="header-anchor" href="#“xxx-first”" aria-hidden="true">#</a></h3><p>第一个</p><h3 id="“xxx-last”" tabindex="-1">$(“xxx:last”) <a class="header-anchor" href="#“xxx-last”" aria-hidden="true">#</a></h3><p>最后一个</p><h3 id="“xxx-not-xxx-”" tabindex="-1">$(“xxx:not(XXX)”) <a class="header-anchor" href="#“xxx-not-xxx-”" aria-hidden="true">#</a></h3><p>不包括 XXX</p><h3 id="“xxx-even”" tabindex="-1">$(“xxx:even”) <a class="header-anchor" href="#“xxx-even”" aria-hidden="true">#</a></h3><h3 id="“xxx-odd”" tabindex="-1">$(“xxx:odd”) <a class="header-anchor" href="#“xxx-odd”" aria-hidden="true">#</a></h3><h3 id="“xxx-eq-index-”" tabindex="-1">$(“xxx:eq(index)”) <a class="header-anchor" href="#“xxx-eq-index-”" aria-hidden="true">#</a></h3><p>选择下标为 index 的</p><h3 id="“xxx-gt-index-”" tabindex="-1">$(“xxx:gt(index)”) <a class="header-anchor" href="#“xxx-gt-index-”" aria-hidden="true">#</a></h3><p>选择下标大于 index 的</p><h3 id="“xxx-lt-index-”" tabindex="-1">$(“xxx:lt(index)”) <a class="header-anchor" href="#“xxx-lt-index-”" aria-hidden="true">#</a></h3><p>匹配所有小于给定索引值的元素</p><h3 id="“xxx-contains-text-”" tabindex="-1">$(“xxx:contains(text)”) <a class="header-anchor" href="#“xxx-contains-text-”" aria-hidden="true">#</a></h3><p>匹配包含给定文本的元素</p><h3 id="“xxx-animated”" tabindex="-1">$(“xxx:animated”) <a class="header-anchor" href="#“xxx-animated”" aria-hidden="true">#</a></h3><p>匹配所有正在执行动画效果的元素</p><h3 id="“-empty”" tabindex="-1">$(“:empty”) <a class="header-anchor" href="#“-empty”" aria-hidden="true">#</a></h3><p>匹配所有不包含子元素或者文本的空元素</p><ul><li>换行的选不到，空格换行属于字符</li></ul><h3 id="“xxx-parent”" tabindex="-1">$(“xxx:parent”) <a class="header-anchor" href="#“xxx-parent”" aria-hidden="true">#</a></h3><p>匹配含有子元素或者文本的元素</p><ul><li>没有子元素或者没有文本就取不到</li></ul><h3 id="“xxx-has-xxx-”" tabindex="-1">$(“xxx:has(XXX)”) <a class="header-anchor" href="#“xxx-has-xxx-”" aria-hidden="true">#</a></h3><p>匹配含有 XXX 的 xxx 元素</p><h3 id="“xxx-hidden”" tabindex="-1">$(“xxx:hidden”) <a class="header-anchor" href="#“xxx-hidden”" aria-hidden="true">#</a></h3><p>匹配所有不可见元素，或者 type 为 hidden 的元素</p><h3 id="“xxx-visible”" tabindex="-1">$(“xxx:visible”) <a class="header-anchor" href="#“xxx-visible”" aria-hidden="true">#</a></h3><p>匹配所有的可见元素</p><h3 id="“xxx-attribute-”" tabindex="-1">$(“xxx[attribute]”) <a class="header-anchor" href="#“xxx-attribute-”" aria-hidden="true">#</a></h3><blockquote><p>匹配包含给定属性的元素，attribute 元素的属性</p></blockquote><ul><li>$(“xxx[id=div]”)</li><li>$(“xxx[id!=thediv]”)</li><li>$(“xxx[id^=‘t’]”)</li><li>$(“xxx[id$=‘v’]”)</li><li>$(“xxx[id*=‘edi’]”)</li><li>$(“xxx[id][class=‘box’][name]”)</li></ul><h3 id="“xxx-checked”" tabindex="-1">$(“xxx:checked”) <a class="header-anchor" href="#“xxx-checked”" aria-hidden="true">#</a></h3><p>匹配所有选中的被选中元素</p><h2 id="jq-属性-api" tabindex="-1">jq 属性 api <a class="header-anchor" href="#jq-属性-api" aria-hidden="true">#</a></h2><blockquote><p>处理对象的核心思想：get first / set all</p></blockquote><ul><li>get(获取)操作默认获取第一个</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 获取第一个class为box的name</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">$</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.box</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">prop</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><ul><li>set(设置)操作默认为设置全部</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 设置全部class为box的name为aaa</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">$</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.box</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">prop</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">aaa</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><h3 id="attr" tabindex="-1">attr <a class="header-anchor" href="#attr" aria-hidden="true">#</a></h3><ul><li>主要用来操作自定义属性</li><li>类似 getAttribute 和 setAttribute 操作</li><li>获取值为布尔值的属性返回布尔值</li><li>而 getAttribute 和 setAttribute 在获取 checked 此类属性是返回 checked 的值，不一定返回布尔值</li></ul><h3 id="prop" tabindex="-1">prop <a class="header-anchor" href="#prop" aria-hidden="true">#</a></h3><ul><li>主要用来操作合法属性</li><li>类似 obj.id 操作</li></ul><h3 id="removeattr" tabindex="-1">removeAttr <a class="header-anchor" href="#removeattr" aria-hidden="true">#</a></h3><p>删除自定义属性</p><h3 id="removeprop" tabindex="-1">removeProp <a class="header-anchor" href="#removeprop" aria-hidden="true">#</a></h3><p>删除合法属性</p><h3 id="addclass" tabindex="-1">addClass() <a class="header-anchor" href="#addclass" aria-hidden="true">#</a></h3><p>添加 class 类名</p><h3 id="removerclass" tabindex="-1">removerClass() <a class="header-anchor" href="#removerclass" aria-hidden="true">#</a></h3><p>删除 class 类名</p><h3 id="hasclass" tabindex="-1">hasClass() <a class="header-anchor" href="#hasclass" aria-hidden="true">#</a></h3><p>有没有某某 class 类名</p><h3 id="toggleclass" tabindex="-1">toggleClass() <a class="header-anchor" href="#toggleclass" aria-hidden="true">#</a></h3><p>没有添加，有则删除</p><h3 id="html" tabindex="-1">html() <a class="header-anchor" href="#html" aria-hidden="true">#</a></h3><ul><li>对应 innerHTML</li><li>没有参数为取值</li><li>有参数为设置</li></ul><h3 id="text" tabindex="-1">text() <a class="header-anchor" href="#text" aria-hidden="true">#</a></h3><ul><li>对应 innerText</li><li>没有参数为取值</li><li>有参数为设置</li></ul><h3 id="val" tabindex="-1">val() <a class="header-anchor" href="#val" aria-hidden="true">#</a></h3><ul><li>对应 value</li><li>没有参数为取值</li><li>有参数为设置</li></ul><h2 id="jqcssapi" tabindex="-1">jqCSSapi <a class="header-anchor" href="#jqcssapi" aria-hidden="true">#</a></h2><h3 id="css" tabindex="-1">css() <a class="header-anchor" href="#css" aria-hidden="true">#</a></h3><ul><li>获取时取第一个并只能获取一个属性</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 获取高度</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">$</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.box</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">css</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">height</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><ul><li>整个集合全部设置</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">$</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.box</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">css</span><span style="--s-dark:#666666;--s-light:#999999;">({</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  width</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 200</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  heigth</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 200</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  backgroundColor</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">red</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span></code></pre><h3 id="offset-1" tabindex="-1">offset() <a class="header-anchor" href="#offset-1" aria-hidden="true">#</a></h3><p>没参数时返回一个包含元素到(视口)文档顶部(包括未显示的 top/left 区域，包括 margin 值)的 top/left 值得对象</p><h3 id="offset-top-num-left-num" tabindex="-1">$().offset({top: num,left: num}) <a class="header-anchor" href="#offset-top-num-left-num" aria-hidden="true">#</a></h3><p>当传值的时候，会强制将元素的 top/left 值变更达到元素距离文档上方、左方的距离只有 num 值</p><h3 id="position-1" tabindex="-1">$().position() <a class="header-anchor" href="#position-1" aria-hidden="true">#</a></h3><p>返回一个包含元素到<code>定位父级</code>的 top/left 值的对象</p><h3 id="srolltop-1" tabindex="-1">$().srollTop() <a class="header-anchor" href="#srolltop-1" aria-hidden="true">#</a></h3><p>返回当前元素纵向滚动条的高度</p><h3 id="srolltop-num" tabindex="-1">$().srollTop(num) <a class="header-anchor" href="#srolltop-num" aria-hidden="true">#</a></h3><p>当有传值的时候，触发一个事件时，元素纵向滚动条立刻到达设置的 num 的高度</p><h3 id="srollleft" tabindex="-1">$().srollLeft() <a class="header-anchor" href="#srollleft" aria-hidden="true">#</a></h3><p>返回当前元素的高度</p><h3 id="srollleft-num" tabindex="-1">$().srollLeft(num) <a class="header-anchor" href="#srollleft-num" aria-hidden="true">#</a></h3><p>当有传值的时候，触发一个事件时，元素横向滚动条立刻到达设置的 num 的高度</p><h3 id="height" tabindex="-1">$().height() <a class="header-anchor" href="#height" aria-hidden="true">#</a></h3><ul><li>无参数，获取高度</li><li>有参数，设置高度</li></ul><h3 id="width" tabindex="-1">$().width() <a class="header-anchor" href="#width" aria-hidden="true">#</a></h3><ul><li>无参数，获取宽度</li><li>有参数，设置宽度</li></ul><h3 id="innerheight" tabindex="-1">$().innerHeight() <a class="header-anchor" href="#innerheight" aria-hidden="true">#</a></h3><ul><li>无参数，获取内部区域高度(包括补白、不包括边框)</li><li>对可见和隐藏元素均有效</li></ul><h3 id="innerwidth" tabindex="-1">$().innerWidth() <a class="header-anchor" href="#innerwidth" aria-hidden="true">#</a></h3><ul><li>无参数，获取内部区域宽度(包括补白、不包括边框)</li><li>此方法对可见和隐藏元素均有效</li></ul><h3 id="outerheight" tabindex="-1">$().outerHeight() <a class="header-anchor" href="#outerheight" aria-hidden="true">#</a></h3><ul><li>无参数，获取外部高度(默认包括补白和边框)</li><li>对可见和隐藏元素均有效</li></ul><h3 id="outerwidth" tabindex="-1">$().outerWidth() <a class="header-anchor" href="#outerwidth" aria-hidden="true">#</a></h3><ul><li>无参数，获取外部宽度(默认包括补白和边框)</li><li>此方法对可见和隐藏元素均有效</li></ul><h2 id="jq-文档处理" tabindex="-1">jq 文档处理 <a class="header-anchor" href="#jq-文档处理" aria-hidden="true">#</a></h2><h3 id="“div”-append-“”" tabindex="-1">$(“div”).append(“<p></p>”) <a class="header-anchor" href="#“div”-append-“”" aria-hidden="true">#</a></h3><ul><li>向每个匹配的(div)元素内部<code>追加</code>(后面)内容(p 标签)</li><li>这个操作与对指定的元素执行 appendChild 方法，将它们添加到文档中的情况类似</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">$</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">div</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">append</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">index</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> html</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">rest</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // index 为div的下标</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // html为div的内容</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">&lt;p&gt;111&lt;/p&gt;</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// ...rest用()框起来</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">$</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">append</span><span style="--s-dark:#666666;--s-light:#999999;">((...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">rest</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">rest</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">&lt;p&gt;111&lt;/p&gt;</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span></code></pre><h3 id="“div”-prepend-“”" tabindex="-1">$(“div”).prepend(“<p></p>”) <a class="header-anchor" href="#“div”-prepend-“”" aria-hidden="true">#</a></h3><ul><li>向每个匹配的(div)元素内部的最前面添加内容(p 标签)</li></ul><h3 id="“p”-appendto-“div”" tabindex="-1">$(“p”).appendTo(“div”) <a class="header-anchor" href="#“p”-appendto-“div”" aria-hidden="true">#</a></h3><ul><li>会把原始的 p 移除</li><li>把所有的 p 标签(包括内容)放入每一个 div 中</li></ul><h3 id="“div”-after-“”" tabindex="-1">$(“div”).after(“<p></p>”) <a class="header-anchor" href="#“div”-after-“”" aria-hidden="true">#</a></h3><ul><li>向每个匹配的(div)元素的后面添加内容(p 标签)</li></ul><h3 id="“”-insertafter-“div”" tabindex="-1">$(“<p></p>”).insertAfter(“div”) <a class="header-anchor" href="#“”-insertafter-“div”" aria-hidden="true">#</a></h3><ul><li>把(p 标签)内容添加到匹配的(div)元素后面</li><li>与 after 一样</li></ul><h3 id="“div”-before-“”" tabindex="-1">$(“div”).before(“<p></p>”) <a class="header-anchor" href="#“div”-before-“”" aria-hidden="true">#</a></h3><ul><li>向每个匹配的(div)元素的前面添加内容(p 标签)</li><li>与 after 相反</li></ul><h3 id="“”-insertbefore-“div”" tabindex="-1">$(“<p></p>”).insertBefore(“div”) <a class="header-anchor" href="#“”-insertbefore-“div”" aria-hidden="true">#</a></h3><ul><li>把(p 标签)内容添加到匹配的(div)元素前面</li><li>与 before 一样</li><li>与 insertAfter 相反</li></ul><h3 id="“p”-wrap-“”" tabindex="-1">$(“p”).wrap(“<div class="father"></div>”) <a class="header-anchor" href="#“p”-wrap-“”" aria-hidden="true">#</a></h3><ul><li>向匹配的(p)元素每一个都添加一个父级 div</li><li>“认爹”</li></ul><h3 id="“p”-unwrap" tabindex="-1">$(“p”).unwrap() <a class="header-anchor" href="#“p”-unwrap" aria-hidden="true">#</a></h3><ul><li>移除匹配的(p)元素的父级</li><li>“逝父”</li></ul><h3 id="“p”-wrapall" tabindex="-1">$(“p”).wrapAll() <a class="header-anchor" href="#“p”-wrapall" aria-hidden="true">#</a></h3><ul><li>向匹配的所有(p)元素添加同一个父级 div</li><li>“大家一起认一个爹”</li></ul><h3 id="“div”-wrapinner-“”" tabindex="-1">$(“div”).wrapInner(“<div class="father"></div>”) <a class="header-anchor" href="#“div”-wrapinner-“”" aria-hidden="true">#</a></h3><ul><li>将每一个匹配的 div 元素的子内容(包括文本节点)用一个新的 div 包裹起来</li><li>“儿子变孙子”</li></ul><h3 id="“p”-replacewith-“”" tabindex="-1">$(“p”).replaceWith(“<b></b>”) <a class="header-anchor" href="#“p”-replacewith-“”" aria-hidden="true">#</a></h3><ul><li>将所有匹配的 p 元素替换成指定的 HTML 或 DOM 元素(b 标签)</li></ul><h3 id="“”-replaceall-“p”" tabindex="-1">$(“<b></b>”).replaceAll(“p”) <a class="header-anchor" href="#“”-replaceall-“p”" aria-hidden="true">#</a></h3><ul><li>用匹配的元素(b 标签)替换掉所有匹配到的元素(p 标签)</li></ul><h3 id="“div”-empty" tabindex="-1">$(“div”).empty() <a class="header-anchor" href="#“div”-empty" aria-hidden="true">#</a></h3><ul><li>把 div 内的所有元素(包括文本)<code>全部删除</code></li></ul><h3 id="“p”-remove" tabindex="-1">$(“p”).remove() <a class="header-anchor" href="#“p”-remove" aria-hidden="true">#</a></h3><ul><li>移除所有匹配的 p 标签</li><li>“自杀，并且所有遗产都没有”</li></ul><h3 id="“p”-detach" tabindex="-1">$(“p”).detach() <a class="header-anchor" href="#“p”-detach" aria-hidden="true">#</a></h3><ul><li>所有绑定的事件、附加的数据等都会保留下来</li><li>“自杀，保留遗产，为了复活”</li></ul><h3 id="“div”-clone-true-false" tabindex="-1">$(“div”).clone(true/false) <a class="header-anchor" href="#“div”-clone-true-false" aria-hidden="true">#</a></h3><ul><li>不传参默认浅克隆，true(深克隆)/false(浅克隆) <ul><li>与原生不一样</li><li>所有找到的 div 都会被克隆</li></ul></li><li>与原生 cloneNode(true/false)类似 <ul><li>true 完全复制(深克隆)</li><li>false 只复制标签外表，不包括内容(浅克隆)</li><li>原生克隆不会复制事件(例如 click 等事件，不管是一级还是二级)</li><li>被克隆对象在 script 中写所有事件和自定义属性都不会克隆</li><li>行内事件本质上是自执行的，为零级事件，与 js 内设置的绑定事件不一样；此时 onclick 相当于写了标签属性，所以写在行内时会克隆这个属性</li></ul></li></ul><h3 id="id-的唯一性" tabindex="-1">id 的唯一性 <a class="header-anchor" href="#id-的唯一性" aria-hidden="true">#</a></h3><ul><li>id 获取时，只会获取第一个，后面的不管</li><li>但不报错</li></ul><h2 id="es6-1" tabindex="-1">es6 <a class="header-anchor" href="#es6-1" aria-hidden="true">#</a></h2><h3 id="const-常量" tabindex="-1">const 常量 <a class="header-anchor" href="#const-常量" aria-hidden="true">#</a></h3><ul><li>申明的变量不能进行二次等号赋值，再次赋值会操错；</li><li>但引用性数据，例如[]数组,{}json 对其添加内容不会报错;</li><li>只是不能改变它的地址指向，它并不是只读的，数组和 json 添加内容时都没有改变它的地址指向</li></ul><h3 id="解构赋值-1" tabindex="-1">解构赋值 <a class="header-anchor" href="#解构赋值-1" aria-hidden="true">#</a></h3><ul><li>[] = []/{} = {}</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 对应赋值</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> b</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> c</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 匹配模式，同名赋值</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 属性匹配，赋值</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> d</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> y</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> e</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  x</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  y</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 属性名与值一致时可以简写</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> d</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> d</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> e</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> e</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  d</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  e</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> d</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> e</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  d</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  e</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span></code></pre><ul><li>展开运算符“…”</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#666666;--s-light:#999999;"> [...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 将类数组展开转换成真的数组</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> box</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getElementsByTagName</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">div</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)];</span></span></code></pre><ul><li>惰性求值</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> f</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  a</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// f = 1</span></span></code></pre><ul><li>默认值</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> y</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">fn</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span></code></pre><ul><li>使用</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> max</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> min</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Math</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">max</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 10</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 10</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">min</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 10</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 1</span></span></code></pre><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">obj</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  let</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> b</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> c</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> obj</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  let</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> b</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> c</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">([</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> b</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> c</span><span style="--s-dark:#666666;--s-light:#999999;">])</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">fn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// es6中没arguments，不确定传的参数时用...</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">(...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span></code></pre><h2 id="es6-字符串扩展" tabindex="-1">es6 字符串扩展 <a class="header-anchor" href="#es6-字符串扩展" aria-hidden="true">#</a></h2><h3 id="查询-返回布尔值" tabindex="-1">查询(返回布尔值) <a class="header-anchor" href="#查询-返回布尔值" aria-hidden="true">#</a></h3><h4 id="str-includes-str1-num" tabindex="-1">str.includes(str1, num) <a class="header-anchor" href="#str-includes-str1-num" aria-hidden="true">#</a></h4><ul><li>str 内是否存在 str1</li><li>有返回 true</li><li>没有返回 false</li><li>num：从什么位置开始</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">hello javascript</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">includes</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">java</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //返回true，存在</span></span></code></pre><h4 id="str-startwith-str1-num" tabindex="-1">str.startWith(str1, num) <a class="header-anchor" href="#str-startwith-str1-num" aria-hidden="true">#</a></h4><ul><li>str 是否以 str1 开始</li><li>有返回 true</li><li>没有返回 false</li><li>num：从什么位置开始</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">hello javascript</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">includes</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">java</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //返回true，存在</span></span></code></pre><h4 id="str-endwith-str1-length" tabindex="-1">str.endWith(str1, length) <a class="header-anchor" href="#str-endwith-str1-length" aria-hidden="true">#</a></h4><ul><li>str 是否以 str1 结束</li><li>有返回 true</li><li>没有返回 false</li><li>length：选择字符串长度\`\`\`</li></ul><h4 id="attributes" tabindex="-1">attributes <a class="header-anchor" href="#attributes" aria-hidden="true">#</a></h4><blockquote><p>一个节点的所有属性</p></blockquote><ul><li>nodeName 属性名</li><li>nodeValue 属性值</li></ul><h4 id="document-createdocumentfragment" tabindex="-1">document.createDocumentFragment() <a class="header-anchor" href="#document-createdocumentfragment" aria-hidden="true">#</a></h4><blockquote><p>dom 标签片段仓库</p></blockquote><ul><li>虚拟的 dom</li><li>在需要连续添加 dom 节点时使用</li><li>提高性能</li></ul><h2 id="回调地狱" tabindex="-1">回调地狱 <a class="header-anchor" href="#回调地狱" aria-hidden="true">#</a></h2><h3 id="promise-异步操作" tabindex="-1">Promise(异步操作) <a class="header-anchor" href="#promise-异步操作" aria-hidden="true">#</a></h3><p>解决异步回调，但不是最优秀的</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">Promise</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">异步操作</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  .</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">回调</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">--</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  .</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">回调1的回调</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">--</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  .</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">回调2的回调</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">--</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">new</span><span style="--s-dark:#B8A965;--s-light:#998418;"> Promise</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">resolve</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> reject</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // resolve成功</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // reject失败</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  $</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">ajax</span><span style="--s-dark:#666666;--s-light:#999999;">({</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    success</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">msg</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">      resolve</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">msg</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    },</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    error</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">error</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {},</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  });</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">})</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  .</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">data</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // then的第一个参数为resolve(msg)成功的回调函数传的值</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 一般接收成功用then</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    $</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">ajax</span><span style="--s-dark:#666666;--s-light:#999999;">({</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">      success</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">msg</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">        resolve</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">msg</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      },</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">      error</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">error</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {},</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    });</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  })</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  .</span><span style="--s-dark:#80A665;--s-light:#59873A;">catch</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">err</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 一般接收失败用catch</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">err</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  });</span></span></code></pre><h4 id="p-promise-all-new-promise-new-promise-new-promise" tabindex="-1">p = Promise.all([new Promise, new Promise, new Promise]) <a class="header-anchor" href="#p-promise-all-new-promise-new-promise-new-promise" aria-hidden="true">#</a></h4><ul><li>所有成功即成功，返回所有成功参数的数组</li><li>有一个失败即失败，返回第一个失败的结果</li></ul><h4 id="p-promise-race-p1-p2-p3" tabindex="-1">p = Promise.race([p1, p2, p3]) <a class="header-anchor" href="#p-promise-race-p1-p2-p3" aria-hidden="true">#</a></h4><ul><li>最先成功的函数的返回的状态就是他的状态</li></ul><h3 id="async-函数" tabindex="-1">async 函数 <a class="header-anchor" href="#async-函数" aria-hidden="true">#</a></h3><p>es2017 提出</p><h2 id="dom-document-object-model-文档对象模型" tabindex="-1">DOM(document object model)文档对象模型 <a class="header-anchor" href="#dom-document-object-model-文档对象模型" aria-hidden="true">#</a></h2><blockquote><p>文档对象模型是表示和操作 HTML、XML 文档内容的基础 API 当网页被加载时，浏览器会根据 DOM 模型将文档解析成一系列节点，构成了一个树状结构。</p></blockquote><p><img src="https://7n.w3cschool.cn/attachments/image/20170619/t_document.png" alt="image"></p><blockquote><p>图中每一个方框都是一个节点，表示一个 node 对象，所有的 node 构成了 DOM Tree</p></blockquote><h3 id="节点有-7-个类型" tabindex="-1">节点有 7 个类型 <a class="header-anchor" href="#节点有-7-个类型" aria-hidden="true">#</a></h3><ul><li><strong>Document：整个文档树的顶层节点</strong></li><li>DocumentType：比如</li><li><strong>Element：网页的各种 HTML 标签</strong></li><li>Attribute：网页元素的属性</li><li>Text：标签之间或标签包含的文本</li><li>Comment：注释</li><li>DocumentFragment：文档片段</li></ul><h3 id="通过-css-选择器选取元素" tabindex="-1">通过 CSS 选择器选取元素 <a class="header-anchor" href="#通过-css-选择器选取元素" aria-hidden="true">#</a></h3><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">querySelectorAll</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.div</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //选择所有class为div的元素</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">querySelectorAll</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">[data-tip=&quot;title&quot;]</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //选择所有data-tip为title的元素</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">querySelectorAll</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">div:not(.ignore)</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //选择所有claa不为ignore的div元素</span></span></code></pre><ul><li>不支持伪元素的选择器，比如：first-line 和 first-letter；也不支持伪类的选择器，比如：link 和：visited。</li></ul><h2 id="文档结构的遍历" tabindex="-1">文档结构的遍历 <a class="header-anchor" href="#文档结构的遍历" aria-hidden="true">#</a></h2><blockquote><p>Document 对象、它的 Element 对象和文档中表示文本的 Text 对象都是 Node 对象。</p></blockquote><h3 id="node-属性：" tabindex="-1">Node 属性： <a class="header-anchor" href="#node-属性：" aria-hidden="true">#</a></h3><ul><li>parentNode</li></ul><blockquote><p>作为<strong>元素树</strong>遍历，只遍历 Element 对象，不包含 Text 和 Comment 对象</p></blockquote><ul><li>children：返回 NodeList 对象，children 列表只包含 Element 对象。（下同）</li><li>nextElementChild、lastElementChild</li><li>nextElementSibling、previousElementChild</li><li>childElementCount：返回子元素数量，同 children.length</li><li>offsetParent：返回最靠近当前元素的父元素，且此父元素 position 不为 static</li></ul><blockquote><p>作为<strong>节点树</strong>遍历，因此会有 Text 和 Comment 对象。@不推荐 🤮</p></blockquote><ul><li>childNodes：返回只读类数组对象(NodeList 对象)，包含 Text 和 Comment。</li><li>firstChild、lastChild：分别返回第一个子节点、最后一个子节点，同样包含 Text 和 Comment</li><li>nextSibling、previousSibling：分别返回下一个兄弟节点、前一个兄弟节点，包含 Text 和 Comment</li><li>textContent：返回该节点和它所有后代节点的文本内容</li><li>nodeType：返回该节点类型代号-number</li><li>nodeName：返回该节点类型名称-string</li><li>nodeValue：返回 Text 和 Comment 的文本内容，其他类型的节点将返回 null</li></ul><h3 id="nodelist-和-htmlcollection" tabindex="-1">NodeList 和 HTMLCollection <a class="header-anchor" href="#nodelist-和-htmlcollection" aria-hidden="true">#</a></h3><ul><li>NodeList 实例对象可能是动态集合也可能是静态集合。DOM Tree 每新增或删除一个节点，都可以反映在 NodeList 接口中。NodeList 实例对象提供 length 属性和数字索引，但不能使用 pop（）、push（）之类数组特有的方法。</li><li>HTMLCollection 实例对象同 NodeList 实例对象，也是节点的集合，返回类数组对象。</li><li>HTMLDocument 类中，有一些属性可以快捷访问节点。比如 images、forms、links 属性指向类数组&lt;img&gt;、&lt;form&gt;、&lt;a&gt;元素集合，返回的都是 HTMLCollection 实例对象。</li></ul><p><img src="`+r+`" alt="HTMLDocument"></p><ul><li><strong>注: HTMLDocument 是类名，调用的是类的实例如 document</strong></li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">forms</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#B8A965;--s-light:#998418;">length</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //返回document文档里&lt;form&gt;个数</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">doby</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //返回&lt;body&gt;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">head</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //返回&lt;html&gt;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">documentElement</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //返回&lt;html&gt;</span></span></code></pre><table><thead><tr><th></th><th>HTMLDocument</th><th>NodeList</th></tr></thead><tbody><tr><td>节点类型</td><td>Element</td><td>Element、Text、Comment</td></tr><tr><td>实例对象</td><td>只能是动态集合</td><td>可动态可静态</td></tr><tr><td>索引方式</td><td>可数字还可 class、id</td><td>只能数字索引</td></tr></tbody></table><h2 id="文档的内容" tabindex="-1">文档的内容 <a class="header-anchor" href="#文档的内容" aria-hidden="true">#</a></h2><ul><li>innerHTML：返回当前元素包含的 Element+Text，可读可写</li><li>outerHTML:返回当前元素及当前元素包含的 Element+Text，可读可写</li><li>textContext：返回当前元素中所有后代节点的所有纯文本，可读可写。若写的内容包含 Element，如&lt;.span&gt;，文档节点不会改动，因为此时&lt;.span&gt;被当作纯文本处理而不是标签。</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> id</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">div</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  &lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">p</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">123</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">p</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> d</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getElementById</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">div</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">d</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">innerHTML</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // &quot;&lt;p&gt;123&lt;/p&gt;&quot;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">d</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">outerHTML</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // &quot;&lt;div id=&quot;div&quot;&gt;&lt;p&gt;123&lt;/p&gt;&lt;/div&gt;&quot;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/*写innerHTML*/</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">d</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">innerHTML</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">&lt;span&gt;99&lt;/span&gt;</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// &lt;div id=&quot;div&quot;&gt;&lt;span&gt;99&lt;/span&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//标签被换了</span></span></code></pre><ul><li>insertAdjacentHTML(beforebegin|afterbegin|beforeend|afterend,‘tag’) <ul><li>此方法可将 HTML 标记符插入到指定元素的指定位置，第一个参数为插入的位置，第二个参数为要插入的标签名称</li></ul></li></ul><p><img src="https://7n.w3cschool.cn/attachments/image/20170619/t_insertAdjacentHTML.png" alt="image"></p><ul><li>document.createElement(‘tag’)：创建一个标签</li><li>document.createTextNode(‘these are some text ~’)：创建文本节点</li><li>createAttribute(‘attribute’,‘value’); 为一个标签创建属性</li><li>cloneNode(‘tag’,true|false); 复制一个标签，第二个参数可选，默认 false（不复制子标签）</li></ul><table><thead><tr><th></th><th>appendChild(new)</th><th>insertBefore(new,old)</th></tr></thead><tbody><tr><td>相同点</td><td>都是在子元素列表中插入元素</td><td></td></tr><tr><td>不同点</td><td>在子元素列表的最后插入</td><td>在 old 元素前面插入 new</td></tr></tbody></table><p><strong>注：如果要插入的节点是已存在与文档中，那么将从原来的位置移除插到指定位置。</strong></p><ul><li>parentNode.removeChild(childnode)：父元素调用此方法删除一个子元素</li><li>parentNode.replaceChild(newNode,oldNode)：父元素调用此方法，替换掉一个不需要的子元素。</li></ul><blockquote><p>DocumentFragment 是一种特殊的 Node，它作为其他节点的一个临时的容器。DocumentFragment 是独立的，而不是任何其他文档的一部分。它的 parentNode 总是为 null。但类似 Element，它可以有任意多的子节点，也可以使用 appendChild()等方法。</p></blockquote><ul><li>DocumentFragment 的特殊之处在于它使得一组节点被当做一个节点看待。</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> frag</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> docment</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">createDocumentFragment</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span></code></pre><h2 id="坐标、尺寸" tabindex="-1">坐标、尺寸 <a class="header-anchor" href="#坐标、尺寸" aria-hidden="true">#</a></h2><ul><li>getBoundingClienRect()：返回一个 rectangle 对象，此对象有 width、height、left、right、top、bottom</li><li>由于元素的默认 position 为 static，是相对于 viewport 的（视口：实际显示 DOM 文档的部分——不包括浏览器的标签栏、搜索栏等），因此会随着页面滚动变化。实现位置固定的一种方法：left+window.scollX, top+window.scollY</li><li>elementFromPoint(X,Y)：返回在指定位置的一个元素</li><li>Element.scrollLeft 属性表示网页元素的水平滚动条向右侧滚动的像素数</li><li>Element.scoollTop 属性表示网页元素的垂直滚动条向下滚动的像素数</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//查看整张网页的水平的和垂直的滚动距离</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">body</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">scrollLeft</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">body</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">scrollTop</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//这两个属性都可读可写</span></span></code></pre><blockquote><p>还可以用 scrollBy(X, Y )控制网页的滚动 所有元素都有 clientWidth、clientHeight 属性，值为 width+padding，不包含 border、margin、滚动条</p></blockquote><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//没有垂直滚动条时</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">documentElement</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">clientHeight</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> window</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">innerHeight</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // true</span></span></code></pre><blockquote><p>对于&lt;.i&gt;、&lt;.code&gt;和&lt;.span&gt;这些内联元素，clientWidth 和 clientHeight 总是 0</p></blockquote><ul><li><p>scollWidth、scollHeight 属性，值也是 width+padding，但包括溢出内容的 width</p></li><li><p>offsetWidth 为 clientWidth+border</p></li></ul><h3 id="document-属性" tabindex="-1">Document 属性 <a class="header-anchor" href="#document-属性" aria-hidden="true">#</a></h3><ul><li>domain 当前文档的域名</li><li>lastModified 文档修改时间的字符串</li><li>location 与 window 对象的 located 属性引用同一个 location 对象</li><li>referree 返回一个字符串，表示访问本文档的来源。如果无法获取来源或用户直接键入网址，则返回空字符串</li><li>title title 节点之间的内容可读写</li><li>doctype document 两个子节点的第一个子节点</li><li>documentElement document 两个子节点的第二个子节点&lt;.html&gt;</li><li>defaultview 返回 window 对象</li><li>activeElement 返回文档中当前获得焦点的那个元素</li><li>characterset 返回渲染当前文档的字符集</li><li>readyState 返回当前文档状态 1loading 加载 HTML2interactive 加载外部资源 3complete 加载完成</li></ul><h3 id="document-方法" tabindex="-1">Document 方法 <a class="header-anchor" href="#document-方法" aria-hidden="true">#</a></h3><ul><li>write() writerIn() <ul><li>可为标签设置 contenteditable 属性为 true 使其可被编辑</li></ul></li></ul><h3 id="execcommand（acommandname-ashowdefaultui-avalueargument）" tabindex="-1">execCommand（aCommandName, aShowDefaultUI, aValueArgument） <a class="header-anchor" href="#execcommand（acommandname-ashowdefaultui-avalueargument）" aria-hidden="true">#</a></h3><ul><li>功能：插入元素、改变样式</li></ul><h3 id="html-属性" tabindex="-1">HTML 属性 <a class="header-anchor" href="#html-属性" aria-hidden="true">#</a></h3><ul><li>getAttribute(‘attr’) 返回属性值</li><li>seAttribute(‘attr’, ‘value’) 为元素新增/修改属性</li><li>hasAttribute(‘attr’) 判断某元素是否有某属性，返回布尔值</li><li>removeAttribute(‘attr’) 为元素移除属性</li></ul><h3 id="数据集（dataset）属性" tabindex="-1">数据集（dataset）属性 <a class="header-anchor" href="#数据集（dataset）属性" aria-hidden="true">#</a></h3><ul><li>在 HTML5 文档中，任意以’data-&#39;为前缀的小写属性都是合法的</li><li>Element 有一个 dataset 属性，Element.dataset 对应一个对象，这个对象的属性对应于’data-&#39;后面的部分，如果有多个-则用驼峰命名。</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-html"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> id</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">top</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> data-tip</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">title</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> t</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getElementById</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">top</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  t</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">dataset</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">tip</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //title</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  t</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">dataset</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">tip</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">title2</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //该属性是实时双向的，任何改变都会影响标签原属性</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span></code></pre><h3 id="attribute-属性是只读类数组对象，索引方式有多种" tabindex="-1">attribute 属性是只读类数组对象，索引方式有多种 <a class="header-anchor" href="#attribute-属性是只读类数组对象，索引方式有多种" aria-hidden="true">#</a></h3><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">body</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attributes</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">0</span><span style="--s-dark:#666666;--s-light:#999999;">];</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //&lt;body&gt;元素的第一个属性</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">body</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attributes</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">bgcolor</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // &lt;body&gt;元素的bgcolor属性</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">body</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attributes</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">ONLOAD</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">];</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // &lt;body&gt;元素的onload属性。</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//同时，属性节点又有name(nodeName)和value（nodeValue）的属性</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> t</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getElemntById</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">top</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attributes</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">0</span><span style="--s-dark:#666666;--s-light:#999999;">].</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // &quot;id&quot;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attributes</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">0</span><span style="--s-dark:#666666;--s-light:#999999;">].</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">nodeName</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // &quot;id&quot;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attributes</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">0</span><span style="--s-dark:#666666;--s-light:#999999;">].</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // &quot;top&quot;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attributes</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">0</span><span style="--s-dark:#666666;--s-light:#999999;">].</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">nodeValue</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // &quot;top&quot;</span></span></code></pre><h2 id="css-1" tabindex="-1">CSS <a class="header-anchor" href="#css-1" aria-hidden="true">#</a></h2><ul><li>Element.style 返回的值是一个 CSSStyleDeclaration</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> t</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getElementById</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">top</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">style</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">color</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">red</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//或</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">setAttribute</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">style</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">background:red;</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><ul><li>style 对象的 cssText 也可以用来读写或删除整个 style 属性。</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">style</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">cssText</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">background:red</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><ul><li><strong>写法注意</strong><ul><li>float 在 JS 中是关键字，因此要写 style.cssFloat</li><li>border-left-width 要写 borderLeftWidth</li><li>三个方法的第一个参数，都是 CSS 属性名，且不用改写连词线。</li></ul></li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-js"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">style</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">setProperty</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">background-color</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">red</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">style</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getPropertyValue</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">background-color</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">style</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">removeProperty</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">background-color</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><h3 id="window-getcomputedstyle" tabindex="-1">window.getComputedStyle() <a class="header-anchor" href="#window-getcomputedstyle" aria-hidden="true">#</a></h3><ul><li>可以用来获取 CSS 伪对象伪元素的样式，第一个参数是元素，第二个参数通常为 null 或空字符串，但也可以是 :before :after :first-line first-letter</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-html"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">style</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  #</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">top</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    line-height</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 30</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">px</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  #</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">top</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">before</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    content</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">before</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    color</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> red</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">style</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> id</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">top</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> style</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">background:red</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> t</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getElementById</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">top</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  window</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getComputedStyle</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">lineHeight</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //30px 去掉连字符</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  window</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getComputedStyle</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">getPropertyValue</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">line-height</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> //30px，无需去掉连字符</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  window</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">getComputedStyle</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">:before</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">content</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // &quot;before&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span></code></pre>`,812),o={__name:"js",setup(k){return(y,A)=>{const a=e("font");return p(),n("div",d,[h,l(a,{color:"red"},{default:t(()=>[i("注意：")]),_:1}),g])}}};export{o as default};
//# sourceMappingURL=js-CRK6j9f1.js.map

import{c as s,o as a,f as n}from"./app-Bm1F-R0U.js";const l="/images/leetcode/6_convert_1.png",p="/images/leetcode/6_convert_2.png",t="/images/leetcode/6_convert_3.png",e={class:"prose m-auto slide-enter-content"},i=n(`<h1 id="_6-z-字形变换" tabindex="-1">6. Z 字形变换 <a class="header-anchor" href="#_6-z-字形变换" aria-hidden="true">#</a></h1><ul><li><a href="https://github.com/shellingfordly/algorithms/tree/master/src/6_convert/convert.ts" target="_blank" rel="noopener">源码</a></li><li><a href="https://github.com/shellingfordly/algorithms/tree/master/src/6_convert/convert.spec.ts" target="_blank" rel="noopener">测试</a></li></ul><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-hidden="true">#</a></h2><p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 “PAYPALISHIRING” 行数为 3 时，排列如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-"><span class="line"><span>P A H N</span></span>
<span class="line"><span>A P L S I I G</span></span>
<span class="line"><span>Y I R</span></span></code></pre><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：“PAHNAPLSIIGYIR”。</p><p>请你实现这个将字符串进行指定行数变换的函数：string convert(string s, int numRows);</p><ul><li>示例 1：</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-"><span class="line"><span>输入：s = &quot;PAYPALISHIRING&quot;, numRows = 3</span></span>
<span class="line"><span>输出：&quot;PAHNAPLSIIGYIR&quot;</span></span></code></pre><ul><li>示例 2：</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-"><span class="line"><span>输入：s = &quot;PAYPALISHIRING&quot;, numRows = 4</span></span>
<span class="line"><span>输出：&quot;PINALSIGYAHRPI&quot;</span></span>
<span class="line"><span>解释：</span></span>
<span class="line"><span>P I N</span></span>
<span class="line"><span>A L S I G</span></span>
<span class="line"><span>Y A H R</span></span>
<span class="line"><span>P I</span></span></code></pre><p>-示例 3：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-"><span class="line"><span>输入：s = &quot;A&quot;, numRows = 1</span></span>
<span class="line"><span>输出：&quot;A&quot;</span></span></code></pre><ul><li>提示：</li></ul><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-"><span class="line"><span>1 &lt;= s.length &lt;= 1000</span></span>
<span class="line"><span>s 由英文字母（小写和大写）、&#39;,&#39; 和 &#39;.&#39; 组成</span></span>
<span class="line"><span>1 &lt;= numRows &lt;= 1000</span></span></code></pre><hr><h2 id="解法" tabindex="-1">解法 <a class="header-anchor" href="#解法" aria-hidden="true">#</a></h2><h3 id="找规律" tabindex="-1">找规律 <a class="header-anchor" href="#找规律" aria-hidden="true">#</a></h3><p>虽然题目叫 Z 字变形，但竖着看其实更像 N 字，不过无所谓，不管 Z 字还是 N 字道理都差不多；</p><p>首先能发现的一个规律，排成 i 行时，<code>(i-1)*2</code> 列一定是每个位置都需要填字符的一列；题目根据条件可以得出，<code>j % (numRows - 1) === 0</code> 的列是需要填字符的列；这样 N 字的两条边就被找到了。</p><p>接下来就是处理 N 字的斜边，我们用二维数组模拟，将需要填字符的下标标出来，如下展示：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-bash"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"># 3行</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">00</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">    02</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">    04</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">10</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 11</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 12</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 13</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 14</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 15</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">20</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">    22</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">    24</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"># 4行</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">00</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">       03</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">       06</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">10</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">    12</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 13</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 14</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">    16</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">20</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 21</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">    23</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">    25</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 26</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">30</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">       33</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">       36</span></span></code></pre><p>其实斜边的规律也不难发现，斜边上的下标相加等于与直边相交处下标的倍数 <code>0+2=2 1+2=2 0+2=2 1+3=4 2+4=6</code>；</p><p>我们可以用一个变量去记录直边上最后一个 i+j 的值，然后当遇到斜边时，<code>(i + j) % flag === 0</code> (下标相加是相交点的倍数)的下标就是需要填字符的地方；其余的地方给空就好。</p><p>最后，我们只要遍历处理好的二维数组，将每个值依次取出拼接成字符串即可。代码如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-ts"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> convert</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">s</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> numRows</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> string</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">[][] =</span><span style="--s-dark:#666666;--s-light:#999999;"> [];</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">index</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">flag</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  for</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">j</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> j</span><span style="--s-dark:#666666;--s-light:#999999;"> &lt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> s</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#B8A965;--s-light:#998418;">length</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> j</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">++</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">!</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">s</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">index</span><span style="--s-dark:#666666;--s-light:#999999;">])</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> break</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    for</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">i</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> i</span><span style="--s-dark:#666666;--s-light:#999999;"> &lt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> numRows</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> i</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">++</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">!</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">s</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">index</span><span style="--s-dark:#666666;--s-light:#999999;">])</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> break</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">!</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">i</span><span style="--s-dark:#666666;--s-light:#999999;">])</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">i</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [];</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      // 双数列</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">!</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">j</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> %</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">numRows</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">)))</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        arr</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">i</span><span style="--s-dark:#666666;--s-light:#999999;">][</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">j</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> s</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">index</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">++</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        flag</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> i</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> j</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> else</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">        // 对角线</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">        if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">!</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">i</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> j</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> %</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> flag</span><span style="--s-dark:#666666;--s-light:#999999;">))</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">i</span><span style="--s-dark:#666666;--s-light:#999999;">][</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">j</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> s</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">index</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">++</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">        else</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">i</span><span style="--s-dark:#666666;--s-light:#999999;">][</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">j</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // return arr.flat().join(&quot;&quot;); 速度稍慢</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arr</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">reduce</span><span style="--s-dark:#666666;--s-light:#999999;">(</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">p</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> n</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">      p</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">      n</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">reduce</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">_p</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> _n</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">        return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> _p</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">typeof</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> _n</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ==</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">string</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">&quot;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ?</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> _n</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> :</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      },</span><span style="--s-dark:#C98A7D99;--s-light:#B5695999;"> &quot;&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">),</span></span>
<span class="line"><span style="--s-dark:#C98A7D99;--s-light:#B5695999;">    &quot;&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  );</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>使用了双 for 创建数组还是比较暴力了一点，leetcode 上跑完测试稍微有点慢, 不过本地测试时给了一个长度 300 多的字符串也就是 1ms，实际应该没有 leetcode 的测试结果这么慢，业务场景中应该是可以接受的速度。</p><p><img src="`+l+'" alt=""><img src="'+p+'" alt=""></p><p>其实 return 遍历结果的时候也可以写的比较简单一点，直接使用 flat 扁平化数组再 join 拼接成字符串即可；代码一下简洁了很多，不过就是在 leetcode 上的运行速度差距实在有点大。</p><p>不过本地测试也都只有几毫秒而已，应该问题也不大，这样写代码简洁很多，也比 reduce 更好懂些。</p><p><img src="'+t+'" alt=""></p>',32),r=[i],y={__name:"6_convert",setup(d){return(h,g)=>(a(),s("div",e,r))}};export{y as default};
//# sourceMappingURL=6_convert-DdE2vgCi.js.map
